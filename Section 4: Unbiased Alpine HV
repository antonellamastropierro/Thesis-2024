# SECTION IV: UNBIASED ALPINE HV

# OBJECTIVE 1: Extract Unbiased Sampling Bio Variables for Analysis for Each Scenario
# OBJECTIVE 2: Create Unbiased Sample HV and Observe HV Size Change over Number of Samples for 10 Simulations

################################################################################
# UNBIASED SCENARIOS:
  # SCENARIO 1 = COMPLETELY UNBIASED POINTS
    # 418 Randomly Selected Unbiased Samples
  # SCENARIO 2 = REALISTIC UNBIASED POINTS
    # 348 Roadside Biased Samples + 20% Additional Unbiased Samples
  # SCENARIO 3 = REALISTIC UNBIASED POINTS (QUALITY COMPONENT REMOVED)
    # 348 Pseudo Biased Samples + 20% Additional Unbiased Samples

################################################################################
# SECTION III: BIASED ALPINE HV RECAP
# Extracted biased sampling bio variables for each scenario
# Created biased HV and observed volume change over number of samples for 10 simulations

################################################################################
# LEGEND:
# AOI = area of interest (European Alps mountain range)
# bio = CHELSA environmental variables
# alp = alpine climate locations
# df = dataframe
# pmtrs = parameters
# vs = virtual species
# pa = presence/absence
# occ = occurrences
# rstr = raster
# std = standardized
# stk = rasterstack
# hv = hypervolume
# sim = simulations
################################################################################
# OBJECTIVE 1: Extract Unbiased Sampling Bio Variables for Analysis for Each Scenario
      # PART A: Scenario 1 Unbiased Sample Bio Extraction
      # PART B: Scenario 2 Unbiased Sample Bio Extraction
      # PART C: Scenario 3 Unbiased Sample Bio Extraction

#------------------------------------------------------------------------------
# PART A: Scenario 1 Unbiased Sample Bio Extraction
# UNBIASED SAMPLES = 418 Randomly Selected Samples (348 + 20%)

# Retrieve number of rows from the biased sampling
nrow(bio_bias_df_xy) # 348
# create a stop that equates to the number of biased sampled collected with an additional 20%
#...of the biased samples collected to show similar sample efforts with curve trend with additional samples
stop <-  ceiling(nrow(bio_bias_df_xy) + 0.2 * (nrow(bio_bias_df_xy)))
# result is a stopping point of 418 samples (amount of unbiased samples to be retrieved)

# select 418 random samples to represent completely unbiased occurrence dataset
sample_1_indices <- sample(nrow(bio_occ_total_df_xy), 418)
bio_1_df_xy <- bio_occ_total_df_xy[sample_1_indices, ]
# save one df with coordinates

glimpse(bio_1_df_xy)

# remove x,y columns from the dataframe for HV calculation
bio_1_df <- bio_1_df_xy[ , -c(1,2)]

# save the unbiased dataframes
write.csv(bio_1_df_xy, file="VS_HV/bio_1_df_xy.csv")
write.csv(bio_1_df, file="VS_HV/bio_1_df.csv")

#-------------------------------------------------------------------------------
# PART B: Scenario 2 Unbiased Sample Bio Extraction
# UNBIASED SAMPLES = 418 Samples (348 Roadside Biased + 20% Unbiased)

# Retrieve a random subsample of 418 points from the unbiased points
# this subsample must include the 348 biased samples as well plus an additional 20%
  #...of unbiased samples
# Number of additional unbiased samples needed
num_add_samples <- stop - nrow(bio_bias_df_xy) # 70

# Retrieve a random subsample of 70 unbiased samples from bio_occ_total_df
# First, remove the biased samples from bio_occ_total_df to ensure they are not included again
set.seed(123) # Setting a seed for reproducibility
bio_2_df_xy <- bio_occ_total_df_xy %>%
  anti_join(bio_bias_df_xy, by = names(bio_occ_total_df_xy)[1:9]) %>% # Using column indices
  sample_n(num_add_samples)
  # 70 samples were collected

# Combine the biased samples with the new random unbiased samples
bio_2_df_xy <- bind_rows(bio_bias_df_xy, bio_2_df_xy)

# Verify the final sample size
nrow(bio_2_df_xy)
# 418 samples

# add a biased = yes/no column to the 5,000 occurrence dataframe
# bio_occ_1_df_all <- bio_occ_1_df_xy %>%
  # mutate(biased = ifelse(row_number() %in% row_number(semi_join(bio_occ_1_df_xy, bio_bias_1_df_xy)), "yes", "no"))

# remove coordinates from subset df for HV calculation
bio_2_df <- bio_2_df_xy[ , -c(1,2)]
# now the unbiased points contain 450 randomly selected points from the unbiased point dataset

glimpse(bio_2_df)
# result is 418 occurrences with 7 bio variables

# save the random subsample
write.csv(bio_2_df_xy, file = "VS_HV/bio_2_df_xy.csv")
write.csv(bio_2_df, file = "VS_HV/bio_2_df.csv")

#-------------------------------------------------------------------------------
# PART C: Scenario 3 Unbiased Sample Bio Extraction
# UNBIASED SAMPLES = 418 Samples (348 Pseudo Biased + 20% Unbiased)

# Retrieve a random subsample of 70 unbiased samples from bio_occ_total_df
# First, remove the pseudo biased samples from bio_occ_total_df to ensure they are not included again
# set.seed(123) # Setting a seed for reproducibility
bio_3_df_xy <- bio_occ_total_df_xy %>%
  anti_join(bio_psbias_df_xy, by = names(bio_occ_total_df_xy)[1:9]) %>% # Using column indices
  sample_n(num_add_samples)
# 70 samples were collected

# Combine the pseudo biased samples with the new random unbiased samples
bio_3_df_xy <- bind_rows(bio_psbias_df_xy, bio_3_df_xy)

# Verify the final sample size
nrow(bio_3_df_xy)
# 418 samples

# remove coordinates from subset df for HV calculation
bio_3_df <- bio_3_df_xy[ , -c(1,2)]
# now the unbiased points contain 450 randomly selected points from the unbiased point dataset

glimpse(bio_3_df)
# result is 418 occurrences with 7 bio variables

# save the random subsample
write.csv(bio_3_df_xy, file = "VS_HV/bio_3_df_xy.csv")
write.csv(bio_3_df, file = "VS_HV/bio_3_df.csv")

################################################################################
# OBJECTIVE 2: Create Unbiased Sample HV and Observe Volume Change over Number of Samples
# PART A: Run the unbiased HV calculations for 10 simulations for each scenario
# PART B: Plot the unbiased HV volume over number of samples for each scenario

#------------------------------------------------------------------------------
# PART A: Run the biased HV calculations for 10 simulations for each scenario
# Purpose: using the two HV calculation functions created, the unbiased HV volume
  #....over number of samples can be created and run for 10 simulations

# store number of simulations (same as biased HV)
num_sim <- 10

# list of the occurrences to be tested (start at 100, by 100, until 418)
n_occ_list <- c(seq(from = 100, to = stop, by = 100), stop)
# Iteration 1 = 100 samples
# Iteration 2 = 200 samples
# Iteration 3 = 300 samples
# Iteration 4 = 400 samples
# Iteration 5 = 418 samples

#_______________________________________________________________________________
## SCENARIO 1 ##

# List to store the simulations
sim_1_list <- list()

# Simulation Loop
for (sim in 1:num_sim) {
  
    output_occ_1_list <- list() # list to store the output occurrences
 
  for (i in seq_along(n_occ_list)) {
    output_1_results <- calc_accum(bio_1_df, n_occ_list[i]) #calc_accum function used on unbiased samples for stated sequence
  
    output_occ_1_list[[i]] <- output_1_results[[1]] # store results into output occurrence list (volume and number of occurrences)
    
    }
  
  # Add the occurrence list to the simulation list
  sim_1_list[[sim]] <- output_occ_1_list
}
# The end result of the loop is a list of 10 simulations, each simulation containing
  #...its own individual list containing the results (volumes, occurrences)
  #...for each iteration

# Combine all simulations into one dataframe
sims_1_df <- do.call(rbind, lapply(seq_along(sim_1_list), function(sim) {
  do.call(rbind, lapply(sim_1_list[[sim]], function(df) {
    df$sim <- sim
    df
  }))
}))

# view the simulation dataframe
glimpse(sims_1_df)
# 3 columns: volumes, num_occ, simulations
# 514 observations

# save unbiased simulation dataframe
write.csv(sims_1_df, file = "VS_HV/sims_1_df.csv")

#_______________________________________________________________________________
## SCENARIO 2 ##

# List to store the simulations
sim_2_list <- list()

# Simulation Loop
for (sim in 1:num_sim) {
  
  output_occ_2_list <- list() # list to store the output occurrences
  
  for (i in seq_along(n_occ_list)) {
    output_2_results <- calc_accum(bio_2_df, n_occ_list[i]) #calc_accum function used on unbiased samples for stated sequence
    
    output_occ_2_list[[i]] <- output_2_results[[1]] # store results into output occurrence list (volume and number of occurrences)
    
  }
  
  # Add the occurrence list to the simulation list
  sim_2_list[[sim]] <- output_occ_2_list
}
# The end result of the loop is a list of 10 simulations, each simulation containing
#...its own individual list containing the results (volumes, occurrences)
#...for each iteration

# Combine all simulations into one dataframe
sims_2_df <- do.call(rbind, lapply(seq_along(sim_2_list), function(sim) {
  do.call(rbind, lapply(sim_2_list[[sim]], function(df) {
    df$sim <- sim
    df
  }))
}))

# view the simulation dataframe
glimpse(sims_2_df)
# 3 columns: volumes, num_occ, simulations
# 464 observations

# save unbiased simulation dataframe
write.csv(sims_2_df, file = "VS_HV/sims_2_df.csv")

#_______________________________________________________________________________
## SCENARIO 3 ##

# List to store the simulations
sim_3_list <- list()

# Simulation Loop
for (sim in 1:num_sim) {
  
  output_occ_3_list <- list() # list to store the output occurrences
  
  for (i in seq_along(n_occ_list)) {
    output_3_results <- calc_accum(bio_3_df, n_occ_list[i]) #calc_accum function used on unbiased samples for stated sequence
    
    output_occ_3_list[[i]] <- output_3_results[[1]] # store results into output occurrence list (volume and number of occurrences)
    
  }
  
  # Add the occurrence list to the simulation list
  sim_3_list[[sim]] <- output_occ_3_list
}
# The end result of the loop is a list of 10 simulations, each simulation containing
#...its own individual list containing the results (volumes, occurrences)
#...for each iteration

# Combine all simulations into one dataframe
sims_3_df <- do.call(rbind, lapply(seq_along(sim_3_list), function(sim) {
  do.call(rbind, lapply(sim_3_list[[sim]], function(df) {
    df$sim <- sim
    df
  }))
}))

# view the simulation dataframe
glimpse(sims_3_df)
# 3 columns: volumes, num_occ, simulations
# 507 observations

# save unbiased simulation dataframe
write.csv(sims_3_df, file = "VS_HV/sims_3_df.csv")

#--------------------------------------------------------------------------------
# PART B: Calculate the Mean Prediction and Plot the average unbiased HV volume over number of samples from the 10 Simulations

## SCENARIO 1 ##

loess_1_preds <- lapply(unique(sims_1_df$num_occ), function(n) {
  # iterate over each unique number of occurrence (n)
  preds_1 <- sapply(sim_1_list, function(list) {
    # Fit LOESS model
    loess_1_fit <- loess(volumes ~ num_occ, data = do.call(rbind, list))
    # predict HV for current number of occurrences (n)
    predict(loess_1_fit, newdata = data.frame(num_occ = n))
  })
  # calculate mean predictions
  data.frame(num_occ = n, hv_mean = mean(preds_1, na.rm = TRUE))
})
# what this code does it fits a LOESS model for each unique occurrence value (100, 200, 300, 400, 419)
  #....in each simulation. Then it takes the average LOESS prediction of each unique occurrence value
  #...of all 10 simulations.

# combine all mean predictions of each simulation into a dataframe (already LOESS fitted)
mean_1_preds <- do.call(rbind, loess_1_preds)

# Plot the LOESS model for the 10 individual simulations along with the mean LOESS predictions
ggplot() +
  geom_smooth(data = sims_1_df, aes(x = num_occ, y = volumes, group = sim), # data from all individual simulations
              method = "loess", se = FALSE, color = "grey", size = 0.5, alpha = 0.5) + 
  geom_line(data = mean_1_preds, aes(x = num_occ, y = hv_mean), # mean prediction LOESS
            color = "deeppink", size = 1.2) +
  labs(title = "Hypervolume Mean: Unbiased (10 Simulations)",
       x = "Number of Occurrences",
       y = "Hypervolume Volume") +
  theme_minimal()
# the graph depicts the average HV volume over number of samples

#_______________________________________________________________________________
## SCENARIO 2 ##

loess_2_preds <- lapply(unique(sims_2_df$num_occ), function(n) {
  # iterate over each unique number of occurrence (n)
  preds_2 <- sapply(sim_2_list, function(list) {
    # Fit LOESS model
    loess_2_fit <- loess(volumes ~ num_occ, data = do.call(rbind, list))
    # predict HV for current number of occurrences (n)
    predict(loess_2_fit, newdata = data.frame(num_occ = n))
  })
  # calculate mean predictions
  data.frame(num_occ = n, hv_mean = mean(preds_2, na.rm = TRUE))
})
# what this code does it fits a LOESS model for each unique occurrence value (100, 200, 300, 400, 419)
#....in each simulation. Then it takes the average LOESS prediction of each unique occurrence value
#...of all 10 simulations.

# combine all mean predictions of each simulation into a dataframe (already LOESS fitted)
mean_2_preds <- do.call(rbind, loess_2_preds)

# Plot the LOESS model for the 10 individual simulations along with the mean LOESS predictions
ggplot() +
  geom_smooth(data = sims_2_df, aes(x = num_occ, y = volumes, group = sim), # data from all individual simulations
              method = "loess", se = FALSE, color = "grey", size = 0.5, alpha = 0.5) + 
  geom_line(data = mean_2_preds, aes(x = num_occ, y = hv_mean), # mean prediction LOESS
            color = "deeppink", size = 1.2) +
  labs(title = "Hypervolume Mean: Unbiased (10 Simulations)",
       x = "Number of Occurrences",
       y = "Hypervolume Volume") +
  theme_minimal()
# the graph depicts the average HV volume over number of samples

#_______________________________________________________________________________
## SCENARIO 3 ##

loess_3_preds <- lapply(unique(sims_3_df$num_occ), function(n) {
  # iterate over each unique number of occurrence (n)
  preds_3 <- sapply(sim_3_list, function(list) {
    # Fit LOESS model
    loess_3_fit <- loess(volumes ~ num_occ, data = do.call(rbind, list))
    # predict HV for current number of occurrences (n)
    predict(loess_3_fit, newdata = data.frame(num_occ = n))
  })
  # calculate mean predictions
  data.frame(num_occ = n, hv_mean = mean(preds_3, na.rm = TRUE))
})
# what this code does it fits a LOESS model for each unique occurrence value (100, 200, 300, 400, 419)
#....in each simulation. Then it takes the average LOESS prediction of each unique occurrence value
#...of all 10 simulations.

# combine all mean predictions of each simulation into a dataframe (already LOESS fitted)
mean_3_preds <- do.call(rbind, loess_3_preds)

# Plot the LOESS model for the 10 individual simulations along with the mean LOESS predictions
ggplot() +
  geom_smooth(data = sims_3_df, aes(x = num_occ, y = volumes, group = sim), # data from all individual simulations
              method = "loess", se = FALSE, color = "grey", size = 0.5, alpha = 0.5) + 
  geom_line(data = mean_3_preds, aes(x = num_occ, y = hv_mean), # mean prediction LOESS
            color = "deeppink", size = 1.2) +
  labs(title = "Hypervolume Mean: Unbiased (10 Simulations)",
       x = "Number of Occurrences",
       y = "Hypervolume Volume") +
  theme_minimal()
# the graph depicts the average HV volume over number of samples

###############################################################################
# CONCLUSION: 
