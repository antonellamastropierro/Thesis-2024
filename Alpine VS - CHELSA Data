# OBJECTIVE: To create and customize a virtual species living in Alpine conditions in Europe
# PART 1: Import environmental data/variables and crop to Europe
# PART 2: Isolate alpine env. variables using Europe alpine shapefile
# PART 3: Run correlation/VIF test on variables to test for multicollinearity
# PART 4: Retrieve mean and sd values for used bio variables
# PART 5: Create virtual species with specified conditions

################################################################################
# PRELIMINARY STEP: INSTALL AND LOAD PACKAGES

install.packages("virtualspecies")
install.packages("raster")

# to install and load ClimDatDownloadR for loading CHELSA data
# function is taken directly from GitHub
if(!require(devtools)) install.packages("devtools")
library(devtools)
devtools::install_github("HelgeJentsch/ClimDatDownloadR")

install.packages("usdm")
install.packages("tidyr")
install.packages("dplyr")
install.packages("sf")
install.packages("viridis")


# geographic data and analysis
library(raster)

# mapping geographical data and obtaining bio variable data
library(ClimDatDownloadR)

# uncertainty analysis for species distribution models
library(usdm)

# data manipulation
library(tidyr)
library(dplyr)

# read shapefiles
library(sf)

# generate virtual species distributions
library(virtualspecies)

# creating blind color appropriate plots
library(viridis)

################################################################################
# PART 1: Import environmental data/variables
  # Section A: upload alpine climate shapefile
  # Section B: download bio variables from CHELSA and crop per alpine shapefile
# Purpose: to import environmental data to be used for observation of vs suitability
# data source: CHELSA
# package: ClimDatDownloadR

# Preliminary Step
# set the working directory where the files are saved/to be saved
setwd("~/UNIBO/Internship and Thesis/R Thesis Project/Thesis Data")
# or setwd("C:/Users/amast/OneDrive/Documents/UNIBO/Internship and Thesis/R Thesis Project/Thesis Data")

#-------------------------------------------------------------------------------
# Section A: upload alpine climate shapefile

# upload the shapefile first in order to be used for the bio variables cropping
alpine <- st_read("global_alpine_30m_v1_1.shp")

# look at a description of the shapefile
print(alpine)
# Geometry Type: Multipolygon
# Dimension: XY
# Extent: xmin: -179.9997 ymin: -55.42102 xmax: 179.9997 ymax: 70.47041
# Coords: +proj=longlat +datum=WGS84 +no_defs
# Column Names: continent, name, area_km2, geometry

# the project will focus on the alpine climate specifically in Europe

# to filter out only Europe alpine areas
alpine_EUR <- filter(alpine, continent == "Europe")

# view the extent of the shapefile for later use when cropping the bio variables
print(alpine_EUR)
# Extent:  xmin: -9.779958 ymin: 36.98059 xmax: 66.89637 ymax: 70.47041

# look at the head and tail of the Europe shapefile to confirm only
# ... Europe polygons are included
head(alpine_EUR)
tail(alpine_EUR)
# confirmed as a Europe-only shapefile

# visualize the new Europe shapefile for confirmation
plot(alpine_EUR$geometry)
# the geometry column is tagged as it contains the polygons
# not filtering out just the geometry column would result in three of the same plots
# shows the alpine locations in Europe

#### QUESTION: HOW TO GET A BACKGROUND MAP OF EUROPE??
dev.off()

#-------------------------------------------------------------------------------
# Section B: download bio variables from CHELSA and crop per alpine shapefile

# download the CHELSA bio variables and isolate specifically to Europe
Chelsa.Clim.download(parameter = "bio", version.var = "2.1",
                     clipping = TRUE, clip.shapefile = alpine_EUR,
                     clip.extent = c(-9.779958, 66.89637, 36.98059, 70.47041),
                     stacking.data = TRUE)
# save.location: default is working directory
# bio.var: default is c(1:19)
# stacking.data set to TRUE

# upload the CHELSA bio variable data into R

# figure out this section
# list.files function: creates a character vector of the file names
bio_EUR_rastlist <- list.files(path ="~/UNIBO/Internship and Thesis/R Thesis Project/Thesis Data/bio/ChelsaV2.1Climatologies/clipped_2024-05-28_11-15-37",
                       pattern = "CHELSA", full.names = TRUE)
# a character vector has been created which can be converted into a spatraster

# create a spatraster of the cropped bio variables in the character vector
bio_EUR <- rast(bio_EUR_rastlist)

# Plot one of the variables to confirm cropping
plot(bio_EUR[[1]])
# Extent matches the shapefile's extent of Europe
### REMEMBER TO EDIT PLOT WITH COLORS, TITLE, ETC

print(bio_EUR)
# class      : SpatRaster 
# dimensions : 4018, 9202, 36973636, 19  (nrow, ncol, ncell, nlayers)
# resolution : 0.008333333, 0.008333333  (x, y)
# extent     : -9.783473, 66.89986, 36.98319, 70.46653  (xmin, xmax, ymin, ymax)
# crs        : +proj=longlat +datum=WGS84 +no_defs 

dev.off()

# bio variables are now cropped to same extent as shapefile but need to be isolated
  # still to alpine condition locations in EURO


# show the current names of the uploaded bio variables
names(bio_EUR)
# Per the CHELSA website:
# BIO1 = Annual Mean Temperature
# BIO2 = Mean Diurnal Range (Mean of monthly (max temp - min temp))
# BIO3 = Isothermality (BIO2/BIO7) (×100)
# BIO4 = Temperature Seasonality (standard deviation ×100)
# BIO5 = Max Temperature of Warmest Month
# BIO6 = Min Temperature of Coldest Month
# BIO7 = Temperature Annual Range (BIO5-BIO6)
# BIO8 = Mean Temperature of Wettest Quarter
# BIO9 = Mean Temperature of Driest Quarter
# BIO10 = Mean Temperature of Warmest Quarter
# BIO11 = Mean Temperature of Coldest Quarter
# BIO12 = Annual Precipitation
# BIO13 = Precipitation of Wettest Month
# BIO14 = Precipitation of Driest Month
# BIO15 = Precipitation Seasonality (Coefficient of Variation)
# BIO16 = Precipitation of Wettest Quarter
# BIO17 = Precipitation of Driest Quarter
# BIO18 = Precipitation of Warmest Quarter
# BIO19 = Precipitation of Coldest Quarter

# to turn into RasterLayer
# worldclim_raster <- raster(worldclim)

# don't change the names of the bio variables yet because some of them will be
  # ...eliminated. Bio variable names will be changed after multicolinearity test

################################################################################
# PART 2: Isolate the bio variables located only in the Alpine shapefile polygons
# the European extent is shown but we need to isolate the bio variables to only
  # ... the values located in the alpine climate areas

# use the mask function to isolate only the Europe alpine values of the bio variables
biovar_EUR_alpine <- mask(bio_EUR, alpine_EUR, inverse = FALSE)
# mask function(file to me masked, file to mask with)

# plot one of the variables to see if isolation/masking was successful
plot(biovar_EUR_alpine[[1]])
# the plot now shows the isolated alpine climate areas in the bio variable plot
## REMEMBER TITLE, COLORS, ETC FOR PLOT

### QUESTION: BACKGROUND MAP???
### QUESTION: Is this right???
dev.off()

################################################################################
# PART 3: Run correlation/VIF test on variables to test for multicollinearity
# Purpose: to eliminate any unneeded variables by comparing the independent variables
# ... and testing for mulitcollinearity in order to avoid redundancy and overfitting
# package: usdm
# variance inflation factor (VIF): measure of the degree of multicollinearity
# ... of one regressor with the other regressors in a linear regression

# Test the already isolated European alpine-specified variables
# vifcor() function runs a correlation test and VIF test
vifcor(biovar_EUR_alpine, th=0.7, keep = NULL, size = 5000,  method = 'pearson')
# th = threshold (0.9 is default)
# keep = if you want to keep a variable regardless of correlation
# method = method used to calculate pairwise correlation (pearson is default)

# The VIF/Correlation test returned: 3, 5, 8, 9, 15, 18, 19
# BIO3 = Isothermality (BIO2/BIO7) (×100)
# BIO5 = Max Temperature of Warmest Month
# BIO8 = Mean Temperature of Wettest Quarter
# BIO9 = Mean Temperature of Driest Quarter
# BIO15 = Precipitation Seasonality (Coefficient of Variation)
# BIO18 = Precipitation of Warmest Quarter
# BIO19 = Precipitation of Coldest Quarter

# therefore, these are the 7 bio variables we want to use when creating the alpine VS

# now that the variables that do not have a colinearity problem are found,
  # ... filter out/eliminate the unneeded variables
biovar_EUR_alpine <- subset(biovar_EUR_alpine, c(3, 5, 8, 9, 15, 18, 19))

# use the names () function to confirm the changes
names(biovar_EUR_alpine)
# it now shoes only have the 7 bio variables identified in the VIF test

# change the names of the variables to make it easier
names(biovar_EUR_alpine) <- c("Isothermality", "Max Temp of Warmest Month", 
                              "Mean Temp of Wettest Quarter", "Mean Temp of Driest Quarter",
                              "Precip Seasonality", "Precip of Warmest Quarter",
                              "Precip of Coldest Quarter")

# confirm the names are changed
names(biovar_EUR_alpine)
# the names now align with the worldclimate descriptions of the variables
  # ...in the masked biovariable Europe alpine spatraster


# however, the unmasked Europe biovariable spatraster will be the one used when plotting the VS

# do the same filtering with the unmasked bio variable spatraster
  # ... because this raster will be the one used for the VS mapping
worldclim_EUR <- subset(worldclim_EUR, c(3, 5, 8, 9, 15, 18, 19))

# confirm filtering has beeen successful
names(worldclim_EUR)
# now shows only the 7 variables identified in the VIF test

# change the names of the variables to match the ones in the masked Europe alpine spatraster
names(worldclim_EUR) <- c("Isothermality", "Max Temp of Warmest Month", 
                          "Mean Temp of Wettest Quarter", "Mean Temp of Driest Quarter",
                          "Precip Seasonality", "Precip of Warmest Quarter",
                          "Precip of Coldest Quarter")

# confirm that the names have changed
names(worldclim_EUR)

### QUESTION: these are specific to alpine VS in Europe. Is that okay or should I
  # ...run the collinearity test for global alpine conditions?

################################################################################
# PART 4: Retrieve mean and sd values for used bio variables
# Purpose: in order to create a custom alpine VS

# the spatraster containing the values at each pixel need to be converted to dataframes
  # ...in order to retrieve the mean and sd values for each of the 7 bio variable
  # ...to input into our custom alpine VS

# convert the masked Europe alpine climate-specific spatraster into a dataframe
EUR_alp_df <- as.data.frame(biovar_EUR_alpine)

# view the dataframe
glimpse(EUR_alp_df)
# now it's a dataframe, showing all the values of each of the 7 variables located
  #... specifically in the alpine climate areas of Europe

# Get the means and SDs of each variable to input later into the VS

# to get the means of all 7 variables at the same time
colMeans(EUR_alp_df)
# Isothermality = 26.901819
# Max Temp of Warmest Month = 15.577946    
# Mean Temp of Wettest Quarter =  5.025422 
# Mean Temp of Driest Quarter = -2.294671
# Precip Seasonality = 29.108434
# Precip of Warmest Quarter = 267.251813 
# Precip of Coldest Quarter = 246.677202

# retrieve SD of all 7 variables
summarize_all(EUR_alp_df, sd)
# Isothermality = 4.950437
# Max Temp of Warmest Month = 2.840423
# Mean Temp of Wettest Quarter = 5.108197
# Mean Temp of Driest Quarter = 8.156361
# Precip Seasonality = 7.926176
# Precip of Warmest Quarter = 78.2355
# Precip of Coldest Quarter = 160.1534

# the means and SDs have now been determined for the necessary 7 variables
# these values will be used to create a custom alpine-specific VS

################################################################################
# PART 5: Create virtual species with specified conditions
# Purpose: using the alpine-specific values for each of bio variable, a alpine-specific
# VS can be created
# SUBSECTIONS:
# A: create env. suitability plot
# B: create presence/absence plot
# C: Sample occurrence points

#-------------------------------------------------------------------------------
# A: Create Environmental Suitability Plot

# first create parameters for alpine species using the mean and SD values retrieved
# ... from part 4
# the raster used will be the unmasked European biovariable raster to show the
# ...VS suitability in relation to all of Europe
alp_pmtrs <- formatFunctions(x=worldclim_EUR,
                             "Isothermality" = c(fun = "dnorm", mean = 26.90, sd = 4.95),
                             "Max Temp of Warmest Month" = c(fun ='dnorm', mean = 15.58, sd=2.84),
                             "Mean Temp of Wettest Quarter"= c(fun = "dnorm", mean = 5.03, sd = 5.11),
                             "Mean Temp of Driest Quarter"= c(fun = "dnorm", mean = -2.29, sd = 8.16),
                             "Precip Seasonality"= c(fun = "dnorm", mean = 29.11, sd = 7.93),
                             "Precip of Warmest Quarter"= c(fun = "dnorm", mean = 267.25, sd = 78.24),
                             "Precip of Coldest Quarter"= c(fun = "dnorm", mean = 246.68, sd = 160.15))

# input the alpine-specific parameters to generate an alpine-specific VS
alp_vs <- generateSpFromFun(raster.stack = worldclim_EUR,
                            parameters = alp_pmtrs,
                            plot = TRUE)
# shows the env. suitability for Europe specific to alpine species

dev.off()

# to visualize the response functions that were inputted
plotResponse(alp_vs)
# all gaussian curves. Visualized the peak suitability values for each of the 7 variables

dev.off()
#-------------------------------------------------------------------------------
# B: Create presence/absence plot

# use converttoPA() function to convert the suitability plot into a binary presence/absence plot
alp_pa <- convertToPA(alp_vs, beta = 0.7, alpha = -0.07, plot = FALSE)
# beta = inflection point of curve
# lower beta = wider distribution range (increase probability of finding suitable conditions)
# higher beta = smaller distribution range (decrease probability of finding suitable conditions)
# alpha = slope of curve ranging from linear to logistic to threshold like
# species prevalence: number of places occupied by the species
#... out of the total number of available places

# for alpine vs maybe good to make higher beta
# maybe better to specify species prevalence to 3% since I found documents saying
# ... Alpine occupies 3% of world
# alp_pa <- convertToPA(alp_vs, beta = 'random', alpha = -0.07, species.prevalence = 0.03,
# plot = TRUE)
alp_pa
# species prevalence = 0.00305, which makes sense

# plot the presence/absence raster
plot(alp_pa$pa.raster)
# for suitability: alp_pa$suitab.raster
# for prob. of occurrence: alp_pa$probability.of.occurrence

dev.off()


#-------------------------------------------------------------------------------
# C: Sample occurrence points
# Purpose: to sample presence only points from P/A plot
  # Presence only shows realized niche

# to show the number of cells
raster(alp_pa$pa.raster)
# number of cells = 92460. This equals the max number of present points

alp_presence <- sampleOccurrences(alp_pa, n = 100, type = "presence only")
# n = # of points to sample
alp_presence
# Type: presence only
# Number of points: 100
# No sampling bias
# Detection probability: 
# Probability: 1
# Corrected by suitability: FALSE
# Probability of identification error (false positive): 0

### Question: should the sample prevalence be changed?

dev.off()

### QUESTION: if sampling in Alpine locations, but alpine only covers 3% of world
  #...would isolating and continuously sampling only in Europe be too little?
