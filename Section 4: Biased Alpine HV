# SECTION IV: BIASED ALPINE HV

# OBJECTIVE 1: Extract Biased Sampling Bio Variables for Analysis
# OBJECTIVE 2: Create Biased Sample HV and Observe Volume Change over Number of Samples for 10 Simulations

################################################################################
# SECTION III UNBIASED ALPINE HV  - RECAP
# Standardized the Bio Variable Raster Layers for Consistency with HV Calculation
# Created two HV Calculation Functions:
  # 1: HV Gaussian Calculation
  # 2: HV Accumulation Calculation and Convergence Criteria Check
# Extracted Unbiased Sampling Bio Variables
# Created Unbiased Sample HV and Observe Volume Change over Number of Samples for 10 Simulations

################################################################################
# LEGEND:
# AOI = area of interest (European Alps mountain range)
# bio = CHELSA environmental variables
# alp = alpine climate locations
# df = dataframe
# pmtrs = parameters
# vs = virtual species
# pa = presence/absence
# occ = occurrences
# rstr = raster
# std = standardized
################################################################################
# OBJECTIVE 1: Retrieve Biased Bio Variables for Analysis
# a standardized bio variable rasterstack was already created in Section III

# first merge bio variables with sample locations
# the bio variables have already been created into a dataframe in Section II

# create a dataframe of the biased points
occ_bias_1_df <- as.data.frame(bias_pts)
bias_coord <- st_coordinates(bias_pts)
occ_bias_1_df <- cbind(bias_coord, occ_bias_1_df)
# rename the x,y columns to match with the biovariable coordinate columns
occ_bias_1_df <- rename(occ_bias_1_df, c(x = X, y = Y))

# make sure all decimal places are correct before merging
bio_AOI_df_std$x <- round(bio_AOI_df_std$x, 5)
bio_AOI_df_std$y <- round(bio_AOI_df_std$y, 5)
occ_bias_1_df$x <- round(occ_bias_1_df$x, 5)
occ_bias_1_df$y <- round(occ_bias_1_df$y, 5)

# merge the points and the bio variables together
bio_bias_1_df <- merge(bio_AOI_df_std, occ_bias_1_df, by = c("x", "y"))

glimpse(bio_bias_1_df)
# result is 29 observations from the biased sampling with their respective bio variables

# eliminate all the non-bio variable columns
bio_bias_1_df <- bio_bias_1_df[ , -c(1,2,10:14)]

# save the bias sample dataframe
save(bio_bias_1_df, file="VS_HV/bio_bias_1_df")

# result is dataframe containing the 29 biased samples and their bio variables
################################################################################
# OBJECTIVE 3: Create Unbiased Sample HV and Observe Volume Change over Number of Samples
# PART A: Run the biased HV calculations for 10 simulations
# PART B: Plot the biased HV volume over number of samples

#------------------------------------------------------------------------------
# PART A: Run the biased HV calculations for 10 simulations
# the two functions needed were already created in Section III

# create a new stop for the biased points
stop_bias <- nrow(bio_bias_1_df)

# store number of simulations
num_sim <- 10

# list of the occurrences to be tested (start at 10, by 10, until 29)
n_occ_bias_list <- c(seq(from = 10, to = stop_bias, by = 10), stop_bias)

# List to store the simulations
sim_bias_list <- list()

# vector to store convergence information
convg_bias_info <- vector("logical", num_sim)

# Simulation Loop
for (sim in 1:num_sim) {
  
  list_output_bias_occ <- list()
  
  for (i in seq_along(n_occ_bias_list)) {
    result_bias <- calc_accum(bio_bias_1_df, n_occ_bias_list[i])
    nelly_bias <- result_bias$result
    converged_bias <- result_bias$converged
    
    list_output_bias_occ[[i]] <- nelly_bias
    
  }
  
  # Store convergence information for this simulation iteration
  convg_bias_info[sim] <- converged_bias
  
  # Add the occurrence list to the simulation list
  sim_bias_list[[sim]] <- list_output_bias_occ
}


# View the convergence information
print(convg_bias_info)

# Combine all simulations into one dataframe
combined_bias_df <- do.call(rbind, lapply(seq_along(sim_bias_list), function(sim) {
  do.call(rbind, lapply(sim_bias_list[[sim]], function(df) {
    df$sim <- sim
    df
  }))
}))

# view resulting dataframe
combined_bias_df

#-------------------------------------------------------------------------------
# PART B: Plot the average biased HV volume over number of samples from the 10 Simulations

# Mean predictions (LOESS): x sequence 
x_seq_bias <- seq(min(combined_bias_df$num_occ), max(combined_bias_df$num_occ), length.out = 100)
loess_predictions_bias <- lapply(unique(combined_bias_df$num_occ), function(n) {
  preds_bias <- sapply(sim_bias_list, function(lista) {
    loess_fit_bias <- loess(volumes ~ num_occ, data = do.call(rbind, lista))
    predict(loess_fit_bias, newdata = data.frame(num_occ = n))
  })
  data.frame(num_occ = n, hv_mean = mean(preds_bias, na.rm = TRUE))
})
predizioni_media_bias <- do.call(rbind, loess_predictions_bias)

# PLOT
ggplot() +
  geom_smooth(data = combined_bias_df, aes(x = num_occ, y = volumes, group = sim), 
              method = "loess", se = FALSE, color = "grey", size = 0.5, alpha = 0.5) +
  geom_line(data = predizioni_media_bias, aes(x = num_occ, y = hv_mean), 
            color = "turquoise4", size = 1.2) +
  labs(title = "Hypervolume Mean: Biased (10 Simulations)",
       x = "Number of Occurrences",
       y = "Hypervolume Volume") +
  theme_minimal()

################################################################################
# CONCLUSION: the resulting mean HV volume for the biased sampling is significantly
  #...larger than the mean HV volume for the unbiased samples. Convergence was not
  #...achieved for any of the biased simulations
