### SIMULATION 1: COMPLETELY BIASED VS. COMPLETELY UNBIASED
### SIMULATION 2: LAZY SAMPLER (COMPLETELY BIASED) VS. LESS LAZY SAMPLER (COMPLETELY BIASED + ADDITION UNBIASED)
### SIMULATION 3: COMPLETELY BIASED VS. TOTAL OCCCURRENCES
### SIMULATION 4: UNBIASED VS. UNBIASED WITH ADDITIONAL SAMPLES

################################################################################
# SIMULATION 1: COMPLETELY BIASED VS. COMPLETELY UNBIASED
  # HV GRAPH
  # BOXPLOT

################################################################################
# SIMULATION 2: LAZY SAMPLER (COMPLETELY BIASED) VS. LESS LAZY SAMPLER (COMPLETELY BIASED + ADDITIONAL UNBIASED)
  # HV GRAPH
  # BOXPLOT

#-------------------------------------------------------------------------------
# BOXPLOT

# unbiased dataframe (subset) = bio_occ_1_df_sub
# biased dataframe = bio_bias_1_df

# Add source labels
bio_occ_1_df_sub$source <- 'Biased'
bio_bias_1_df$source <- 'Unbiased'

# Combine the two dataframes
combined_data_2 <- rbind(bio_occ_1_df_sub, bio_bias_1_df)

# Pivot the combined dataframe to long format
long_data_2 <- combined_data_2 %>%
  pivot_longer(cols = -source, names_to = "variable", values_to = "value")

# Create the boxplot
ggplot(long_data_2, aes(x = variable, y = value, fill = source)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Central Tendency Plot: Unbiased vs. Biased (Standardized)",
       x = "Variables",
       y = "Values",
       fill = "Dataset") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



################################################################################
# SIMULATION 3: COMPLETELY BIASED VS. TOTAL OCCCURRENCES
  # HV GRAPH
  # BOXPLOT

################################################################################
# SIMULATION 4: UNBIASED VS. UNBIASED WITH ADDITIONAL SAMPLES
  # HV GRAPH
  # BOXPLOT

# total occurrence dataframe: bio_occ_1_df
#-------------------------------------------------------------------------------
# Pull 348 random unbiased samples from the total occurrence dataframe
sample_348_indices <- sample(nrow(bio_occ_1_df_xy), 348)
bio_occ_348_xy_df <- bio_occ_1_df_xy[sample_348_indices, ]

# Add 70 additional unbiased samples to those 348 subsamples for second dataframe
bio_occ_418_df_xy <- bio_occ_1_df_xy %>%
  anti_join(bio_occ_348_xy_df, by = names(bio_occ_1_df_xy)[1:9]) %>% # Using column indices
  sample_n(num_add_samples)
# 70 samples were collected

# Combine the biased samples with the new random unbiased samples
bio_occ_418_df_xy <- bind_rows(bio_occ_348_xy_df, bio_occ_418_df_xy)

# remove x,y columns from dataframes
bio_occ_348_df <- bio_occ_348_xy_df[ , -c(1,2)]
bio_occ_418_df <- bio_occ_418_df_xy[ , -c(1,2)]

# save the dataframes (with the coordinates) as csv
write.csv(bio_occ_348_xy_df, file = "VS_HV/bio_occ_348_xy_df.csv")
write.csv(bio_occ_418_df_xy, file = "VS_HV/bio_occ_418_df_xy.csv")
#-------------------------------------------------------------------------------
# Create a Boxplot comparing the variability of the two datasets

# Add source labels
bio_occ_348_df$source <- '348 Samples'
bio_occ_418_df$source <- '418 Samples'
# source columns are added to the two datasets
  ## remember to remove them before HV calculation

# Combine the two dataframes
combined_data_4 <- rbind(bio_occ_348_df, bio_occ_418_df)

# Pivot the combined dataframe to long format
long_data_4 <- combined_data_4 %>%
  pivot_longer(cols = -source, names_to = "variable", values_to = "value")

# Create the boxplot
ggplot(long_data_4, aes(x = variable, y = value, fill = source)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Central Tendency Plot: 348 Samples vs. 418 Samples (Standardized)",
       x = "Variables",
       y = "Values",
       fill = "Dataset") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
# the boxplot shows exactly the same variability for both datasets

#-------------------------------------------------------------------------------
# HV Calculations

# remove the 'source' column from the datasets
bio_occ_348_df <- bio_occ_348_df[ , -8]
bio_occ_418_df <- bio_occ_418_df[ , -8]
# now the datasets only contain the 7 bio variables

#-------------------------------------------------------------------------------
# HV CALCULATION: 348 UNBIASED SAMPLES

# run simulations for first dataset (unbiased with 348 samples)
# store number of simulations
num_sim <- 10

# list of the occurrences to be tested (start at 100, by 100, until 348)
n_occ_bias_list <- c(seq(from = 100, to = stop_bias, by = 100), stop_bias)
# Iteration 1 = 100 samples
# Iteration 2 = 200 samples
# Iteration 3 = 300 samples
# Iteration 4 = 348 samples

# List to store the simulations
sim_348_list <- list()

# Simulation Loop
for (sim in 1:num_sim) {
  
  output_348_list <- list() # list to store the output occurrences
  
  for (i in seq_along(n_occ_bias_list)) {
    output_348_results <- calc_accum(bio_occ_348_df, n_occ_bias_list[i]) #calc_accum function used on unbiased samples for stated sequence
    
    output_348_list[[i]] <- output_348_results[[1]] # store results into output occurrence list (volume and number of occurrences)
    
  }
  
  # Add the occurrence list to the simulation list
  sim_348_list[[sim]] <- output_348_list
}
# The end result of the loop is a list of 10 simulations, each simulation containing
#...its own individual list containing the results (volumes, occurrences)
#...for each iteration

# Combine all simulations into one dataframe
sims_348_df <- do.call(rbind, lapply(seq_along(sim_348_list), function(sim) {
  do.call(rbind, lapply(sim_348_list[[sim]], function(df) {
    df$sim <- sim
    df
  }))
}))

# view the simulation dataframe
glimpse(sims_348_df)
# 3 columns: volumes, num_occ, simulations
# 356 observations

# save unbiased simulation dataframe
save(sims_348_df, file = "VS_HV/sims_df")

#--------------------------------------------------------------------------------
# Calculate the Mean Prediction and Plot the average unbiased HV volume over number of samples from the 10 Simulations

# iterates over each unique occurrence number value.
# Fits a LOESS (Locally Estimated Scatterplot Smoothing) model for each number
# ...of occurrence to predict hv volume using the simulation data
# LOESS model: Smooths out noise and variations to get a better understanding of relationship between HV volume and # occurrences
# lapply: apply the function (n) to each unique number of occurrence (100, 200, 300, 400, 418)
loess_348_preds <- lapply(unique(sims_348_df$num_occ), function(n) {
  # iterate over each unique number of occurrence (n)
  preds_348 <- sapply(sim_348_list, function(list) {
    # Fit LOESS model
    loess_348_fit <- loess(volumes ~ num_occ, data = do.call(rbind, list))
    # predict HV for current number of occurrences (n)
    predict(loess_348_fit, newdata = data.frame(num_occ = n))
  })
  # calculate mean predictions
  data.frame(num_occ = n, hv_mean = mean(preds_348, na.rm = TRUE))
})
# what this code does it fits a LOESS model for each unique occurrence value (100, 200, 300, 400, 419)
#....in each simulation. Then it takes the average LOESS prediction of each unique occurrence value
#...of all 10 simulations.

# combine all mean predictions of each simulation into a dataframe (already LOESS fitted)
mean_348_preds <- do.call(rbind, loess_348_preds)

# Plot the LOESS model for the 10 individual simulations along with the mean LOESS predictions
ggplot() +
  geom_smooth(data = sims_348_df, aes(x = num_occ, y = volumes, group = sim), # data from all individual simulations
              method = "loess", se = FALSE, color = "grey", size = 0.5, alpha = 0.5) + 
  geom_line(data = mean_348_preds, aes(x = num_occ, y = hv_mean), # mean prediction LOESS
            color = "deeppink", size = 1.2) +
  labs(title = "Hypervolume Mean: Unbiased (10 Simulations)",
       x = "Number of Occurrences",
       y = "Hypervolume Volume") +
  theme_minimal()
# the graph depicts the average HV volume over number of samples. Convergence was
#...not achieved in any of the simulations

#-------------------------------------------------------------------------------
# HV CALC: 418 UNBIASED SAMPLES

# run simulations for first dataset (unbiased with 348 samples)
# store number of simulations
num_sim <- 10

# list of the occurrences to be tested (start at 100, by 100, until 348)
n_occ_list <- c(seq(from = 100, to = stop, by = 100), stop)
# Iteration 1 = 100 samples
# Iteration 2 = 200 samples
# Iteration 3 = 300 samples
# Iteration 4 = 400 samples
# Iteration 5 = 418 samples

# List to store the simulations
sim_418_list <- list()

# Simulation Loop
for (sim in 1:num_sim) {
  
  output_418_list <- list() # list to store the output occurrences
  
  for (i in seq_along(n_occ_list)) {
    output_418_results <- calc_accum(bio_occ_418_df, n_occ_list[i]) #calc_accum function used on unbiased samples for stated sequence
    
    output_418_list[[i]] <- output_418_results[[1]] # store results into output occurrence list (volume and number of occurrences)
    
  }
  
  # Add the occurrence list to the simulation list
  sim_418_list[[sim]] <- output_418_list
}
# The end result of the loop is a list of 10 simulations, each simulation containing
#...its own individual list containing the results (volumes, occurrences)
#...for each iteration

# Combine all simulations into one dataframe
sims_418_df <- do.call(rbind, lapply(seq_along(sim_418_list), function(sim) {
  do.call(rbind, lapply(sim_418_list[[sim]], function(df) {
    df$sim <- sim
    df
  }))
}))

# view the simulation dataframe
glimpse(sims_418_df)
# 3 columns: volumes, num_occ, simulations
# 495 observations

# save unbiased simulation dataframe
save(sims_418_df, file = "VS_HV/sims_df")

#--------------------------------------------------------------------------------
# Calculate the Mean Prediction and Plot the average unbiased HV volume over number of samples from the 10 Simulations

# iterates over each unique occurrence number value.
# Fits a LOESS (Locally Estimated Scatterplot Smoothing) model for each number
# ...of occurrence to predict hv volume using the simulation data
# LOESS model: Smooths out noise and variations to get a better understanding of relationship between HV volume and # occurrences
# lapply: apply the function (n) to each unique number of occurrence (100, 200, 300, 400, 418)
loess_418_preds <- lapply(unique(sims_418_df$num_occ), function(n) {
  # iterate over each unique number of occurrence (n)
  preds_418 <- sapply(sim_418_list, function(list) {
    # Fit LOESS model
    loess_418_fit <- loess(volumes ~ num_occ, data = do.call(rbind, list))
    # predict HV for current number of occurrences (n)
    predict(loess_418_fit, newdata = data.frame(num_occ = n))
  })
  # calculate mean predictions
  data.frame(num_occ = n, hv_mean = mean(preds_418, na.rm = TRUE))
})
# what this code does it fits a LOESS model for each unique occurrence value (100, 200, 300, 400, 419)
#....in each simulation. Then it takes the average LOESS prediction of each unique occurrence value
#...of all 10 simulations.

# combine all mean predictions of each simulation into a dataframe (already LOESS fitted)
mean_418_preds <- do.call(rbind, loess_418_preds)

# Plot the LOESS model for the 10 individual simulations along with the mean LOESS predictions
ggplot() +
  geom_smooth(data = sims_418_df, aes(x = num_occ, y = volumes, group = sim), # data from all individual simulations
              method = "loess", se = FALSE, color = "grey", size = 0.5, alpha = 0.5) + 
  geom_line(data = mean_418_preds, aes(x = num_occ, y = hv_mean), # mean prediction LOESS
            color = "deeppink", size = 1.2) +
  labs(title = "Hypervolume Mean: Unbiased (10 Simulations)",
       x = "Number of Occurrences",
       y = "Hypervolume Volume") +
  theme_minimal()
# the graph depicts the average HV volume over number of samples. Convergence was
#...not achieved in any of the simulations

#-------------------------------------------------------------------------------
# Plot the two datasets Together

# Filter any NAs
mean_348_preds <- filter(mean_348_preds, !is.na(num_occ) & !is.na(hv_mean))
mean_418_preds <- filter(mean_418_preds, !is.na(num_occ) & !is.na(hv_mean))

# Plot the mean LOESS predictions for unbiased and biased HVs with their individual simulation results
ggplot() +
  geom_smooth(data = sims_348_df, aes(x = num_occ, y = volumes, group = sim, color = "348 Samples"), 
              method = "loess", se = FALSE, size = 0.5, alpha = 0.5) +
  geom_smooth(data = sims_418_df, aes(x = num_occ, y = volumes, group = sim, color = "418 Samples"), 
              method = "loess", se = FALSE, size = 0.5, alpha = 0.5) +
  geom_line(data = mean_348_preds, aes(x = num_occ, y = hv_mean, color = "348 Sample Mean"), 
            size = 1.2) +
  geom_line(data = mean_418_preds, aes(x = num_occ, y = hv_mean, color = "418 Sample Mean"), 
            size = 1.2) +
  labs(title = "HV Volume over Number of Occurrences: 348 Samples Vs. 418 Samples",
       x = "Occurrences",
       y = "Volume",
       color = "Legend") +
  scale_color_manual(values = c("348 Sample Mean" = "deeppink", "418 Sample Mean" = "turquoise4")) +
  theme_minimal()

#-------------------------------------------------------------------------------
# BOXPLOT COMPARING BIASED 348 SAMPLES WITH UNBIASED 348 SAMPLES WITH TOTAL 5000 OCCURRENCES

# remove 'source' column from biased dataframe
bio_bias_1_df <- bio_bias_1_df[ ,-8]

# Add a column to differentiate the datasets
bio_occ_1_df$dataset <- 'Total Occurrences'
bio_bias_1_df$dataset <- 'Biased 348 Occurrences'
bio_occ_348_df$dataset <- 'Unbiased 348 Occurrences'

# Combine the dataframes
combined_data_all <- bind_rows(bio_occ_1_df, bio_bias_1_df, bio_occ_348_df)

# Reshape data for ggplot2
melted_data_all <- combined_data_all %>% 
  pivot_longer(cols = -dataset, names_to = "Variable", values_to = "Value")

# Plot using ggplot2
ggplot(melted_data_all, aes(x = Variable, y = Value, fill = dataset)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Comparison of Occurrences Across Datasets",
       x = "Variables",
       y = "Values") +
  scale_fill_brewer(palette = "Set3")
