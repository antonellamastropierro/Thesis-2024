# OBJECTIVE 1: To create and customize an unbiased virtual species living in an alpine climate in the European Alps
# OBJECTIVE 2: To determine the environmental (abiotic) variable values and geographic location of the unbiased realized niche of the alpine
  #... VS in the European Alps.
# PART 1: Import environmental data/variables
# PART 2: Isolate alpine env. variables using Europe alpine shapefile
# PART 3: Run correlation/VIF test on variables to test for multicollinearity
# PART 4: Retrieve mean and standard deviation values for selected bio variables
# PART 5: Create unbiased virtual species with specified alpine conditions
# PART 6: Retrieve selected bio variable values from unbiased realized niche and occurrence points

################################################################################
# PRELIMINARY STEP 1: INSTALL AND LOAD PACKAGES

install.packages("virtualspecies")
install.packages("raster")
install.packages("geodata")
install.packages("usdm")
install.packages("tidyr")
install.packages("dplyr")
install.packages("sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("ggplot2")
install.packages("viridis")

# geographic data and analysis
library(raster)

# mapping geographical data
library(rnaturalearth)
library(rnaturalearthdata)

# uncertainty analysis for species distribution models
library(usdm)

# data manipulation
library(tidyr)
library(dplyr)

#plotting
library(ggplot2)

# read shapefiles
library(sf)

# generate virtual species distributions
library(virtualspecies)

# color palette creation
library(viridis)

#-------------------------------------------------------------------------------
# PRELIMINARY STEP 2: SET WORKING DIRECTORY

setwd("~/UNIBO/Internship and Thesis/R Thesis Project/Thesis Data")

# LEGEND:
  # bio = bio variables
  # EUR = Europe
  # alp = alpine climate locations
  # EA = European Alps
  # vs = virtual species
  # pa = presence/absence
  # occ = sample occurrences
  # df = dataframe
  # rstr = raster
  # brn = baseline realized niche

# create color palette
vl <- viridis(500, option = "D")

################################################################################
# PART 1: Import environmental data/variables
# Purpose: to import environmental data to be used for observation of vs suitability
# data source: worldclim
# package: raster

# retrieve the 19 bio variables from their saved location in the working directory
# create a character vector of all 19 variables in order to combine and create a spatraster
bio_global_files <- list.files(path="wc30", pattern = "bio", full.names = TRUE)
# the files downloaded from Worldclim are 30s resolution dating from 1970 to 2000
## REMEMBER TO RENAME THE TIFS IN THE FILE TO MAKE LIFE EASIER
print(bio_global_files)

# reorder the files before converting to a spatraster
bio_global_files <- bio_global_files[c(1, 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)]

# confirm reorder
print(bio_global_files)

# create a spatraster of the 19 bio variables
bio_global <- rast(bio_global_files)

names(bio_global)
# plot bio variable 1 (mean temp) for confirmation
plot(bio_global[[1]])
# var = variable (i.e. temp, prec)  bio = all 19
# res = resolution
# path = default is current working directory

dev.off()

# look at the characteristics of the bio variables
print(bio_global)
# class: SpatRaster
# dimensions  : 1080, 2160, 19  (nrow, ncol, nlyr)
# resolution  : 0.1666667, 0.1666667  (x, y)
# extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)
# coord. ref. : lon/lat WGS 84 (EPSG:4326)
# when turned to RasterLayer: # cells = 2332800

# show the current manes of the uploaded bio variables
names(bio_global)
# Per the WorldClimate website:
# BIO1 = Annual Mean Temperature
# BIO2 = Mean Diurnal Range (Mean of monthly (max temp - min temp))
# BIO3 = Isothermality (BIO2/BIO7) (×100)
# BIO4 = Temperature Seasonality (standard deviation ×100)
# BIO5 = Max Temperature of Warmest Month
# BIO6 = Min Temperature of Coldest Month
# BIO7 = Temperature Annual Range (BIO5-BIO6)
# BIO8 = Mean Temperature of Wettest Quarter
# BIO9 = Mean Temperature of Driest Quarter
# BIO10 = Mean Temperature of Warmest Quarter
# BIO11 = Mean Temperature of Coldest Quarter
# BIO12 = Annual Precipitation
# BIO13 = Precipitation of Wettest Month
# BIO14 = Precipitation of Driest Month
# BIO15 = Precipitation Seasonality (Coefficient of Variation)
# BIO16 = Precipitation of Wettest Quarter
# BIO17 = Precipitation of Driest Quarter
# BIO18 = Precipitation of Warmest Quarter
# BIO19 = Precipitation of Coldest Quarter

# to turn into RasterLayer
# worldclim_raster <- raster(worldclim)

# don't change the names of the bio variables yet because some of them will be
# ...eliminated

################################################################################
# PART 2: Isolate alpine env. variables using Europe alpine shapefile
# Purpose: using a shapefile with Alpine conditions, we can filter out alpine conditions
#... located only in Europe and isolate the worldclimate bio variables located
# ... in the European alpine areas in order to isolate only alpine bio conditions
# data source: https://figshare.com/articles/dataset/Global_distribution_and_bioclimatic_characterization_of_alpine_biomes/11710002
# SUBPARTS:
# A: Upload Alpine shapefile and modify to only Europe
# B: Crop the worldclimate bio variables to match extent of Alpine shapefile
# C: Isolate the bio variables located only in the Alpine shapefile polygons

#-------------------------------------------------------------------------------
# A: Upload Alpine shapefile and modify to only European Alps

# upload the alpine climate shapefile from where it's saved
global_alp <- st_read("alp_shpfiles/alpineclimate/global_alpine_30m_v1_1.shp")

# look at a description of the shapefile
print(global_alp)
# Geometry Type: Multipolygon
# Dimension: XY
# Extent: xmin: -179.9997 ymin: -55.42102 xmax: 179.9997 ymax: 70.47041
# Coords: +proj=longlat +datum=WGS84 +no_defs
# Column Names: continent, name, area_km2, geometry

# the project will focus only on the alpine climate in the European Alps

# to filter out only alpine climate areas in the European Alps
alp_EUR <- filter(global_alp, name == "European Alps")

# look at the shapefile to confirm only European Alps alpine climate polygons are included
glimpse(alp_EUR)
# the European Alps alpine climate shapefile does not show the entire European Alp mountain range

# upload a shapefile containing the entire European Alp delineated mountain range
  #...to be used as the area of interest (AOI)
# shapefile obtained from: European Environment Agency (EEA)
EUR_mtn <- st_read("alp_shpfiles/eu_mtn/m_massifs_v1.shp")

# check the CRS
st_crs(EUR_mtn)
# the CRS is not in the correct crs, so it needs to be transformed

# transform shapefile coord to ID 4326
EUR_mtn <- st_transform(EUR_mtn, 4326)
st_crs(EUR_mtn)
# it's not in appropriate CRS

# filter out the delineated European Alp mountiain range
EA <- filter(EUR_mtn, name_mm == "Alps")

# visualize Alp mountain range
plot(EA$geometry)

# get bounding box of EA mountain range
st_bbox(EA)
# xmin = 4.735802, xmax = 17.000550, ymin = 43.135029, ymax = 48.364782

# save the Alps and European alpine climate shapefiles for easier use later
save(alp_EUR, file = "alp_shpfiles/alpineclimate/alp_EUR.shp")
save(EA, file = "alp_shpfiles/eu_mtn/EA.shp")

# to load the files
# load(file="alp_shpfiles/alpineclimate/alp_EUR.shp")


# plot the alpine climate location and European Alp boundary shapefiles
  #...specify the extent to match the European Alp sf extent
ggplot() + 
  geom_sf(data = alp_EUR, fill = 'blue', color = 'blue', alpha = 0.5) +
  geom_sf(data = EA, color = 'black', alpha = 0.5) + 
  coord_sf(xlim = c(4.735802, 17.000550), ylim = c(43.135029, 48.364782)) +
  theme_minimal()
# plot shows the European Alps alpine climate locations with respect to European Alp mountain range
## MODIFY PLOT LATER FOR AESTHETICS

# for visualization the European Alpine shapefile, create a background map 
# add a background map to the shapefile for  visualization
# retrieve Europe background map from rnaturalearth
EUR <- ne_countries(continent = "europe")

# plot for confirmation
plot(EUR$geometry)

# CONFIRM SHAPEFILE COORDS ARE THE SAME
if (st_crs(EUR) == st_crs(EA)) {print("Equal")} else {print("Not Equal")}

# to plot alp mountain range and alpine climate with respect to country borders
ggplot() + 
  geom_sf(data = alp_EUR, fill = 'blue', color = 'blue', alpha = 0.5) +
  geom_sf(data = EA, color = 'red', alpha = 0.5) + 
  geom_sf(data=EUR, color = "black", alpha = 0.5) +
  coord_sf(xlim = c(4.735802, 17.000550), ylim = c(43.135029, 48.364782)) +
  theme_minimal()
### does line up correctly with country borders -> get another admin map

dev.off()

#-------------------------------------------------------------------------------
# B: Crop the worldclimate bio variables to match extent of European Alps boundaries shapefile

# In order to compare the bio variables and Europe alpine shapefile, their
  # ...coords must be the same
# show the CRS of the worldclimate variables
st_crs(bio_global)
st_bbox(EA)
# if unsure, a logical function can be used
if (st_crs(bio_global) == st_crs(EA)) { print("Equal")} else {print("Not Equal")}
# the CRSs are equal
# but to make the coords the same
# another method: st_transform(alpine_EUR, crs(worldclim))

# Crop out the bio variable spatraster to match the extent of the Alps shapefile
bio_EA <- crop(bio_global, EA)
# crop function(file to be cropped, file with the extent needed for cropping)

# mask the bio rasters to match the delineate Alp mountain range extent
bio_EA <- mask(bio_EA, EA, inverse = FALSE)
# mask function(file to me masked, file to mask with)

# visualize a plot to see if the cropping and masking was successful
# I.E. index out bio variable 1 (annual avg temp) since spatraster is a combination of the 19 variables
plot(bio_EA[[1]])
# the new worldclimate spatraster (bio_EA) now has the same extent as the Alps shapefile
  #... and shows only bio variables within the European Alp mountain range

dev.off()

#-------------------------------------------------------------------------------
# C: Isolate the bio variables located only in the European Alps alpine climate shapefile polygons
# the European Alps boundary is set as the AOI, but we need to isolate the bio variables to only
  # ... the values located in the alpine climate areas in order to create alpine climate-specific
  #... VS within the European Alps

# use the mask function again to isolate only the alpine climate values of the bio variables
bio_EA_alp<- mask(bio_EA, alp_EUR, inverse = FALSE)

# plot one of the variables to see if isolation/masking was successful
plot(bio_EA_alp[[1]])
# the plot now shows the isolated alpine climate areas in the bio variable AOI
## REMEMBER AESTHETICS FOR PLOTS (TITLE, LEGEND, COLOR)

dev.off()

# to plot the isolated alpine bio variables (i.e. mean temp) against the EA boundaries

# first convert raster layer to data frame
bio_EA_alp_df <- as.data.frame(bio_EA_alp[[1]], xy=TRUE)

# get the column name for the mean temp values
colnames(bio_EA_alp_df)
# mean temp value column = wc2.1_30s_bio_1

# plot the mean temp raster with the Europe shapefile
ggplot() +
  geom_tile(data = bio_EA_alp_df, aes(x = x, y = y, fill = wc2.1_30s_bio_1), alpha = 0.7) +
  geom_sf(data = EA, fill = NA, color = 'black', size = 1) +
  coord_sf(xlim = c(4.735802, 17.000550), ylim = c(43.135029, 48.364782)) +
  theme_minimal()
# plot shows better visualization of the mean temp of the European Alps' alpine climate
  #... with respect to Europe
## REMEMBER TO MODIFY PLOTS FOR AESTHETICS

dev.off()

################################################################################
# PART 3: Run correlation/VIF test on variables to test for multicollinearity
# Purpose: to eliminate any unneeded variables by comparing the independent variables
# ... and testing for mulitcollinearity in order to avoid redundancy and overfitting
# package: usdm
# variance inflation factor (VIF): measure of the degree of multicollinearity
# ... of one regressor with the other regressors in a linear regression

# Test the already isolated European alpine-specified variables
# vifcor() function runs a correlation test and VIF test
vifcor(bio_EA_alp, th=0.7, keep = NULL, method = 'pearson')
# th = threshold (0.9 is default)
# keep = if you want to keep a variable regardless of correlation
# method = method used to calculate pairwise correlation (pearson is default)

# The VIF/Correlation test returned 8 bio variables: 3, 4, 6, 8, 9, 15, 18, 19
  # After excluding the collinear variables, the linear correlation coefficients ranges between: 
  # min correlation ( wc2.1_30s_bio_18 ~ wc2.1_30s_bio_6 ):  -0.001683467 
  # max correlation ( wc2.1_30s_bio_9 ~ wc2.1_30s_bio_8 ):  -0.6665463 

# ---------- VIFs of the remained variables -------- 
 # Variables       VIF
#1  wc2.1_30s_bio_3  2.381082
#2  wc2.1_30s_bio_4  3.269080
#3  wc2.1_30s_bio_6  3.196020
#4  wc2.1_30s_bio_8  6.390263
#5  wc2.1_30s_bio_9 11.163823
#6 wc2.1_30s_bio_15  2.745991
#7 wc2.1_30s_bio_18  5.495467
#8 wc2.1_30s_bio_19  6.833737

# VIF VARIABLES (8 TOTAL)
# BIO3 = Isothermality (BIO2/BIO7) (×100)
# BIO4 = Temperature Seasonality (standard deviation ×100)
# BIO6 = Min Temperature of Coldest Month
# BIO8 = Mean Temperature of Wettest Quarter
# BIO9 = Mean Temperature of Driest Quarter
# BIO15 = Precipitation Seasonality (Coefficient of Variation)
# BIO18 = Precipitation of Warmest Quarter
# BIO19 = Precipitation of Coldest Quarter

# therefore, these are the 8 bio variables we want to use when creating the alpine VS

# now that the variables that do not have a colinearity problem are found,
# ... filter out/eliminate the unneeded variables
bio_EA_alp <- subset(bio_EA_alp, c(3, 4, 6, 8, 9, 15, 18, 19))

# use the names () function to confirm the changes
names(bio_EA_alp)
# it now shoes only have the 8 bio variables identified in the VIF test

# change the names of the variables to make it easier
names(bio_EA_alp) <- c("Isothermality", "Temp Seasonality", "Min Temp of Coldest Month",
                        "Mean Temp of Wettest Quarter", "Mean Temp of Driest Quarter",
                        "Precip Seasonality", "Precip of Warmest Quarter",
                              "Precip of Coldest Quarter")

# confirm the names are changed
names(bio_EA_alp)
# the names now align with the worldclimate descriptions of the variables
# ...in the masked biovariable Europe alpine spatraster

# however, the Alp boundary (AOI) biovariable spatraster will be the one used when plotting the VS

# do the same filtering with the unmasked bio variable spatraster
# ... because this raster will be the one used for the VS mapping
bio_EA <- subset(bio_EA, c(3, 4, 6, 8, 9, 15, 18, 19))

# confirm filtering has been successful
names(bio_EA)
# now shows only the 8 variables identified in the VIF test

# change the names of the variables to match the ones in the masked Europe alpine spatraster
names(bio_EA) <- c("Isothermality", "Temp Seasonality", "Min Temp of Coldest Month",
                    "Mean Temp of Wettest Quarter", "Mean Temp of Driest Quarter",
                    "Precip Seasonality", "Precip of Warmest Quarter",
                    "Precip of Coldest Quarter")

# confirm that the names have changed
names(bio_EA)

### QUESTION: these are specific to masked alpine climate areas in the Alps. Is that okay or should I
# ...run the collinearity test for the entire European Alps conditions?

################################################################################
# PART 4: Retrieve mean and sd values for used bio variables
# Purpose: in order to create a custom alpine VS

# the spatraster containing the values at each pixel need to be converted to dataframes
# ...in order to retrieve the mean and sd values for each of the 7 bio variable
# ...to input into our custom alpine VS

# convert the masked Europe alpine climate-specific spatraster into a dataframe
bio_EA_alp_df <- as.data.frame(bio_EA_alp)

# view the dataframe
glimpse(bio_EA_alp_df)
# now it's a dataframe, showing all the values of each of the 8 variables located
#... specifically in the alpine climate areas of Europe

# Get the means and SDs of each variable to input later into the VS

# to get the means of all 8 variables at the same time
colMeans(bio_EA_alp_df)
# Isothermality = 28.08
# Temp Seasonality = 579.80
# Min Temp of Coldest Month = -10.93
# Mean Temperature of Wettest Quarter = 1.36
# Mean Temperature of Driest Quarter = -1.48
# Precipitation Seasonality = 18.73
# Precipitation of Warmest Quarter = 305.21
# Precipitation of Coldest Quarter = 278.15

# retrieve SD of all 8 variables
summarize_all(bio_EA_alp_df, sd)
# Isothermality = 2.52
# Temp Seasonality = 28.77
# Min Temp of Coldest Month = 1.91
# Mean Temperature of Wettest Quarter = 5.44
# Mean Temperature of Driest Quarter = 7.36
# Precipitation Seasonality = 6.48
# Precipitation of Warmest Quarter = 110.29
# Precipitation of Coldest Quarter = 103.08

# the means and SDs have now been determined for the necessary 8 variables
# these values will be used to create a custom alpine-specific VS

################################################################################
# PART 5: Create virtual species with specified conditions
# Purpose: using the alpine-specific values for each of bio variable, a alpine-specific
# VS can be created
# SUBSECTIONS:
# A: create env. suitability plot
# B: create presence/absence plot
# C: Sample occurrence points

#-------------------------------------------------------------------------------
# A: Create Environmental Suitability Plot

# first create parameters for alpine species using the mean and SD values retrieved
# ... from part 4
# the raster used will be the unmasked European biovariable raster to show the
# ...VS suitability in relation to all of Europe
alp_pmtrs <- formatFunctions(x=bio_EA,
                             "Isothermality" = c(fun = "dnorm", mean = 28.08, sd = 2.52),
                             "Temp Seasonality" = c(fun = "dnorm", mean = 579.80, sd = 28.77),
                             "Min Temp of Coldest Month" = c(fun = "dnorm", mean = -10.93, sd = 1.91),
                             "Mean Temp of Wettest Quarter"= c(fun = "dnorm", mean = 1.36, sd = 5.44),
                             "Mean Temp of Driest Quarter"= c(fun = "dnorm", mean = -1.48, sd = 7.36),
                             "Precip Seasonality"= c(fun = "dnorm", mean = 18.73, sd = 6.48),
                             "Precip of Warmest Quarter"= c(fun = "dnorm", mean = 305.21, sd = 110.29),
                             "Precip of Coldest Quarter"= c(fun = "dnorm", mean = 278.15, sd = 103.08))

# input the alpine-specific parameters to generate an alpine-specific VS
alp_vs_1 <- generateSpFromFun(raster.stack = bio_EA,
                            parameters = alp_pmtrs,
                            plot = TRUE)
# shows the env. suitability for Europe specific to alpine species (scale of 0 to 1)

dev.off()

# to save the first alpine VS generated
save(alp_vs_1, file = "VS_EA/alp_vs_1")

# to load the alpine VS
load(file = "VS_EA/alp_vs_1")

# to visualize the response functions that were inputted
plotResponse(alp_vs_1)
# all gaussian curves. Visualized the peak suitability values for each of the 7 variables

dev.off()
#-------------------------------------------------------------------------------
# B: Create presence/absence plot

# use converttoPA() function to convert the suitability plot into a binary presence/absence plot
alp_pa_1 <- convertToPA(alp_vs_1, beta = 0.6, alpha = -0.05, plot = FALSE)
# beta = inflection point of curve
# lower beta = wider distribution range (increase probability of finding suitable conditions)
# higher beta = smaller distribution range (decrease probability of finding suitable conditions)
# alpha = slope of curve ranging from linear to logistic to threshold like
  # alpha = -0.07 is set as a logistic-like curve
# species prevalence: number of places occupied by the species
#... out of the total number of available places

# for alpine vs maybe good to make higher beta
# maybe better to specify species prevalence to 3% since I found documents saying
# ... Alpine occupies 3% of world
# alp_pa <- convertToPA(alp_vs, beta = 'random', alpha = -0.07, species.prevalence = 0.03,
# plot = TRUE)
alp_pa_1
# probabilistic method = logistic
# species prevalence = 0.0012

# save presence/absence VS 1
save(alp_pa_1, file = "VS_EA/alp_pa_1")

# load presence/absence VS 1
load(file = "VS_EA/alp_pa_1")

# plot the presence/absence raster
plot(alp_pa_1$pa.raster)
# for suitability: alp_pa$suitab.raster
# for prob. of occurrence: alp_pa$probability.of.occurrence

# the presence/absence VS represents the realized niche of the VS, with respect
  # ...to abiotic factors only

dev.off()


#-------------------------------------------------------------------------------
# C: Sample occurrence points
# Purpose: to sample presence only points from P/A plot
# Presence only shows realized niche

# to show the number of cells
raster(alp_pa_1$pa.raster)
# number of total cells = 924416. This equals the max number of points of potential occurrence

# the sampleoccurrence function allows to sample n # of points from the presence points
alp_occ_1 <- sampleOccurrences(alp_pa_1, n = 100, type = "presence only",
                                    correct.by.suitability = TRUE, plot = FALSE)
# n = # of points to sample, meaning 100 of the 924416 were sampled
# sample prevalence = proportion of samples in which the species has been found
  # 0.9 means that 90% of the samples, species were found
# correct by suitability = TRUE so that detection is dependent on suitability.
  # less suitable cells will have a lower probability of presence than higher suitable cells

### QUESTION: wouldn't sample prevalence be better suited for presence/absence data?

alp_occ_1
# Type: presence only
# Number of points: 100
# No sampling bias
# Detection probability: 
# Probability: 1
# Corrected by suitability: TRUE
# Probability of identification error (false positive): 0

#save sample occurrence 1
save(alp_occ_1, file = "VS_EA/alp_occ_1")

#load sample occurrence 1
load(file = "VS_EA/alp_occ_1")

# plot the sample points on the European Alps suitability raster
plot(alp_pa_1$suitab.raster, col = vl)
points(alp_occ_1$sample.points, col = "black", pch = 19)
# some of the occurrence points are observed in low suitability areas
  #... even though correct by suitability is set to TRUE, it only influences
  #... the sampling towards suitable environments but doesn't completely eliminate it
  # THIS IS ABIOTIC FACTORS ONLY: a reason for an occurrence outside of it's abiotic
  #... suitability could be due to biotic factors or movement factors, maybe
## REMEMBER EDITING PLOT (TITLE, AXES, LEGEND)

dev.off()

################################################################################
# PART 6: Retrieve Selected Bio Variable Values From Unbiased Realized Niche and Occurrence Points
# the realized niche (presence/absence) and occurrence points have been found
  #... but only observed in geographic space. Therefore, the bio variable values
  #... from both the realized niche and occurrence points need to be retrieved in order
  #... to identify the realized niche and occurrence points in environmental space
# SECTION A: retrieve bio variable values from unbiased realized niche
# SECTION B: retrieve bio variable values from unbiased occurrence points

#-------------------------------------------------------------------------------
# SECTION A: retrieve bio variable values from realized niche
# Realized Niche = Presence Values from the Presence-Absence Plot (alp_pa_1)

# convert virtual species into a raster
alp_pa_1_rstr <- raster(alp_pa_1$pa.raster)
# presence/absence is now a raster layer
freq(alp_pa_1_rstr, value=1)
# NCells = 399. This equals number of baseline realized niches cells

# the bio variable values need to be retrieved as well
# convert each bio variable (8 total) into individual raster layers
bio1_rstr <- raster(bio_EA$Isothermality)
bio2_rstr <- raster(bio_EA$`Temp Seasonality`)
bio3_rstr <- raster(bio_EA$`Min Temp of Coldest Month`)
bio4_rstr <- raster(bio_EA$`Mean Temp of Wettest Quarter`)
bio5_rstr <- raster(bio_EA$`Mean Temp of Driest Quarter`)
bio6_rstr <- raster(bio_EA$`Precip Seasonality`)
bio7_rstr <- raster(bio_EA$`Precip of Warmest Quarter`)
bio8_rstr <- raster(bio_EA$`Precip of Coldest Quarter`)
# I kept all variables as raster layers for consistency throughout

# to compare the bio variables with the presence values, combine all the raster layers
brn_rstr <- stack(alp_pa_1_rstr, bio1_rstr, bio2_rstr, bio3_rstr, bio4_rstr, bio5_rstr,
                      bio6_rstr, bio7_rstr, bio8_rstr)

# confirm all layers were added
nlayers(brn_rstr)
# 9 layers total

# convert niche raster to dataframe
brn_df <- as.data.frame(brn_rstr, xy=TRUE)

# find the name of the presence/absence column
glimpse(brn_df)
# presence/absence column = lyr.1

# filter out the presence-only values (lyr.1 = 1)
brn_df <- filter(brn_df, lyr.1 == 1)
# only presence points = realized niche values

# real_niche_df = a dataframe containing all the bio variable values located in
  #...realized niche

# convert realized niche df back to a realized niche raster
brn_rstr <- rasterFromXYZ(brn_df[,-3])
# [,-3] indicates to remove the 3rd column (lyr.1) from the raster since no longer
  #... needed

# plot realized niche raster with respect to each bio variable
plot(brn_rstr, col=vl)
## REMEMBER TO EDIT PLOTS

# plot realized niche for just one variable
plot(brn_rstr$Isothermality, col=vl)
# REMEMBER TO EDIT PLOTS

dev.off()

#-------------------------------------------------------------------------------
# SECTION B: retrieve bio variable values from unbiased occurrence points

# same method used for realized niche bio value retrieval doesn't work for the
  #...occurrence points b/c there's no "Z" value
### QUESTION: WHY?

# sample points need to be converted into a dataframe first
occ_1_df <- as.data.frame(alp_occ_1$sample.points, xy=TRUE)

# glimpse the dataframe
glimpse(occ_1_df)
# the sample points are unbiased, meaning that all Observed = Real
# so no need to filter out samples with Real & Observed = 1

# in a situation of biased sampling (presence of false positives and/or false negatives)
#...the Real =1 and Observed = 1 columns may not match up
# in such case, the data frame would need to be filtered out for points with both Real and Observed = 1
  # CODE: occ_df <- sample_df[sample_df$Real == 1 & sample_df$Observed == 1, ]
  # The comma after the condition means to keep all columns of the data frame

# convert the 8 bio variables to dataframes
bio_EA_df <- as.data.frame(bio_EA, xy=TRUE)

# merge the occurrence and bio variable data frames together by the coords so
  #...that everything aligns properly and the selected bio data frames has the occurrence
  #...points with their respective bio variable values
occ_1_bio_df <- merge(bio_EA_df, occ_1_df, by = c("x", "y"))
# result is a dataframe containing all bio variable values for the occurrence points

# to convert back to raster
occ_1_bio_rstr <- rasterFromXYZ(occ_1_bio_df[,-(11:12)])
# removing real and observed columns

# plot the occurrence points with respect to a bio variable
plot(occ_1_bio_rstr$Isothermality, col=vl)
points(alp_occ_1$sample.points, col = "black", pch = 1)
# EDIT PLOTS - right now points are directly on top of occurence bio variables
  #...so it's pointless

dev.off()

#################################################################################
# CONCLUSION:
  # the alpine climate conditions specific to the European Alps geographic location has been
  #...isolated and a alpine-specific VS was able to be created using the 8 selected
  #...non-colinear bio variables.
  # A presence/absence plot was then created for the alpine VS revealing the realized
  #...niche of the alpine VS with respect to geographic space
  # 100 unbiased samples were pulled from the presence/absence plot in order to retrieve
  #...unbiased occurrence points with respect to geographic space
  # the alpine VS unbiased realized niche and occurrence points were the filtered
  #...in order to retrieve their respective bio variable values
  # This data will be used to create an unbiased realized ecological niche model
  #...to compare against a biased realized ecological niche model
