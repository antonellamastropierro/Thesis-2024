# OBJECTIVE: To create and customize a virtual species living in Alpine conditions
  # PART 1: Import environmental data/variables
  # PART 2: Run correlation/VIF test on variables to test for multicollinearity
  # PART 3: Define Alpine conditions per Koeppen Geiger Climate zones
      ## Issues with Part 3, Section D
  # PART 4: Create virtual species with specified conditions

################################################################################
# PRELIMINARY STEP: INSTALL AND LOAD PACKAGES

install.packages("virtualspecies")
install.packages("raster")
install.packages("geodata")
install.packages("usdm")
install.packages("tidyr")
install.packages("dplyr")
install.packages("kgc")

# geographic data and analysis
library(raster)

# mapping geographical data
library(geodata)

# uncertainty analysis for species distribution models
library(usdm)

# Koeppen Geiger Climate zones
library(kgc)

# data manipulation
library(tidyr)
library(dplyr)

# generate virtual species distributions
library(virtualspecies)

################################################################################
# PART 1: Import environmental data/variables
# Purpose: to import environmental data to be used for observation of vs suitability
  # ... in env. and geo. space
    # A: bio variables
    # B: elevation and land cover

#-------------------------------------------------------------------------------
# A: Import worldclim bio variables
# data source: worldclim
# package: geodata

worldclim <- worldclim_global(var="bio", res=10, path = tempdir())
# var = variable (i.e. temp, prec) - bio = all 
# res = resolution
# path = where to save data

worldclim
# class = spatraster
# dimensions: rows = 1080, cols = 2160
# extent = -180, 180, -90, 90
# coordinate reference = lon/lat WGS 84 (EPSG:4326)

names(worldclim)
# shows the 19 bio variables
# BIO1 = Annual Mean Temperature
# BIO2 = Mean Diurnal Range (Mean of monthly (max temp - min temp))
# BIO3 = Isothermality (BIO2/BIO7) (×100)
# BIO4 = Temperature Seasonality (standard deviation ×100)
# BIO5 = Max Temperature of Warmest Month
# BIO6 = Min Temperature of Coldest Month
# BIO7 = Temperature Annual Range (BIO5-BIO6)
# BIO8 = Mean Temperature of Wettest Quarter
# BIO9 = Mean Temperature of Driest Quarter
# BIO10 = Mean Temperature of Warmest Quarter
# BIO11 = Mean Temperature of Coldest Quarter
# BIO12 = Annual Precipitation
# BIO13 = Precipitation of Wettest Month
# BIO14 = Precipitation of Driest Month
# BIO15 = Precipitation Seasonality (Coefficient of Variation)
# BIO16 = Precipitation of Wettest Quarter
# BIO17 = Precipitation of Driest Quarter
# BIO18 = Precipitation of Warmest Quarter
# BIO19 = Precipitation of Coldest Quarter
rename(worldclim[[1]], meantemp = wc2.1_10m_bio_1)
plot(worldclim)

# to rename the variables
  # BIO1 = avg temperature
meantemp <- worldclim[[1]]
plot(meantemp)
meantemp

  # BIO12 = annual precipitation
annualprecip <- worldclim[[12]]
plot(annualprecip)
annualprecip

# plot the 2 variables together
par(mfrow=c(2,1))
plot(meantemp)
plot(annualprecip)

dev.off()

#-------------------------------------------------------------------------------
# B: Import elevation data and forest land cover
# data source (elevation): Shuttle Radar Topography Mission (SRTM)
# data source (land cover): ESA WorldCover
# package: geodata

# elevation
elev <- elevation_global(res=10, path= tempdir())
elev
# dimensions: rows = 1080, cols = 2169
# extent: -180, 180, -90, 90


# land cover: trees
trees <- landcover(var="trees", path=tempdir())
trees
# dimensions: rows = 17289, cols = 43200
# extent = -180, 180, -60, 84

# plot them together
par(mfrow=c(2,1))
plot(elev)
plot(trees)

dev.off()

# the landcover raster has a different extent than the other rasters
# to make the trees the same extent
trees <- resample(trees, elev, method='bilinear')
# resample (): terra package
trees
# dimensions: rows = 1080, cols = 2160
# extent: -180, 180, -90, 90

#_______________________________________________________________________________
# REMAINING TASKS (THESIS EXPLANATIONS)
  # 1) look into resample function(): method = bilinear
  # 2) discuss rasters and raster componenents (i.e. dimensions, resolution, etc)

# QUESTIONS:
  # 1) is making all the rasters have same extent useful?

###############################################################################
# PART 2: variable correlation test to test for multicollinearity
# Purpose: to compare the indepedent variables and test for mulitcollinearity
  # ... in order to avoid redundancy and overfitting
# package: usdm
# variance inflation factor (VIF): measure of the degree of multicollinearity
  # ... of one regressor with the other regressors in a linear regression

# vifcor() runs a correlation test and VIF test
vifcor(worldclim, th=0.7, keep = NULL, method = 'pearson')
  # th = threshold (0.9 is default)
  # keep = if you want to keep a variable regardless of correlation
  # method = method used to calculate pairwise correlation (pearson is default)

# test revealed following 9 remaining variables with threshold lower than 0.7:
  # BIO2 = Mean Diurnal Range (Mean of monthly (max temp - min temp))
  # BIO3 = Isothermality (BIO2/BIO7) (×100)
  # BIO8 = Mean Temperature of Wettest Quarter
  # BIO14 = Precipitation of Driest Month
  # BIO15 = Precipitation Seasonality (Coefficient of Variation)
  # BIO18 = Precipitation of Warmest Quarter
  # BIO19 = Precipitation of Coldest Quarter

#_______________________________________________________________________________
# REMAINING TASKS (THESIS EXPLANATIONS)
  # 1) explain multicollinearity and VIF
  # 2) explain purpose of this step

# QUESTIONS:
  # 1) how to pick the best threshold?
  # 2) should I include these variables when determining Alpine conditions?
  # 2) should I include these variables when creating my VS and omit the ones
      # ... I used to determine Alpine conditions?

################################################################################
# PART 3: Define Alpine conditions per Koeppen Geiger Climate (KGC) zones
# Purpose: to determine statistical characteristics of variables from an Alpine
  # ... climate to fit into the VS alpine creation using an objective method
  # A: import Koeppen Geiger Climate data frame
  # B: convert variable rasters into data frames
  # C: merge all data frames together
  # D: filter out data frames and variables based on KGC Alpine classification
  # E: determine central tendency and variance of Alpine condition variables

#-------------------------------------------------------------------------------
# A: Import KGC zones
# data source: University of Veterinary Medicine Vienna
  # https://koeppen-geiger.vu-wien.ac.at
# package: kgc

kgc_df <- climatezones
# dataframe of kgc and coordinates
# ET = Polar tundra

# plot kgc map
kgc <- raster("koppen_geiger_0p5.tif")
plot(kgc)
kgc
# dimensions: rows = 360, cols = 720
# extent: -180, 180, -90, 90
# coords: long, lat, WGS84

dev.off()

#_______________________________________________________________________________
# REMAINING TASKS (THESIS EXPLANATIONS)
  # 1) explain KGC zones
  # 2) remember to set working directory for any external files
  # 3) find better kgc raster to plot

#-------------------------------------------------------------------------------
# SECTION B: Convert variable rasters into data frames
# package: base, dplyr

# convert elevation to df
elev_df <- as.data.frame(elev, xy=TRUE)
glimpse(elev_df)
# columns: x, y, elev

# rename elevation column
elev_df <- rename(elev_df, elev = wc2.1_10m_elev)
colnames(elev_df)

# convert tree cover to df
trees_df <- as.data.frame(trees, xy=TRUE)
glimpse(trees_df)
# columns: x, y, trees

# convert temp to df
temp_df <- as.data.frame(meantemp, xy=TRUE)
glimpse(temp_df)

# rename column to meantemp
temp_df <- rename(temp_df, meantemp = wc2.1_10m_bio_1)
colnames(temp_df)

# convert precip to df
precip_df <- as.data.frame(annualprecip, xy=TRUE)
glimpse(precip_df)

# rename column to annualprecip
precip_df <- rename(precip_df, annualprecip = wc2.1_10m_bio_12)
colnames(precip_df)

#_______________________________________________________________________________
# REMAINING TASKS (THESIS)
  # 1) understand xy=TRUE argument

# QUESTIONS
  # 1) should I use the variables that passed the correlation test?

#-------------------------------------------------------------------------------
# SECTION D: Filter out data frames and variables based on KGC Alpine classification
# Alpine Conditions = ET + high elevation + 0% tree cover (above tree line)
# packages: dplyr

# kgc_df: select only ET classifications
kgc_df_ET <- filter(kgc_df, Cls == "ET")
summary(kgc_df_ET)

# trees_df: select only 0 tree cover
trees_df_0 <- filter(trees_df, trees ==0)
summary(trees_df_0)

# elev_df: select elev > 0
elev_df_100 <- filter(elev_df, elev > 100)
summary(elev_df_100)

# filtering for meantemp
# ppp <- filter(pp, between(temp_df$bio1, 0, 10))
# summary(ppp)

# par(mfrow = c(1,2))
# plot(gg)
# plot(elev)
# gg <- merge.data.frame(elev_df, trees_df)
# colnames(gg)

#_______________________________________________________________________________
# REMAINING TASKS:
  # 1) determine good elevation starting point

#-------------------------------------------------------------------------------
# C: Merge all data frames together
  # data frames: kcg_df, temp_df, precip_df, elev_df, trees_df
  # packages: base

# merge.data.frame function merges two data frames by common columns or rows
# common columns for all data frames = coords (x,y)
df <- merge.data.frame(trees_df_0, kgc_df_ET)
### ERROR: cannot allocate vector of size XXX Gb
  # Error only occurs when I try to merge the kgc data frame

glimpse(df)

dff <- merge.data.frame(df, temp_df)
glimpse(dff)
dff <- drop_na(dff)

ddff <- merge.data.frame(dff, precip_df)
glimpse(ddff)
ddff <- drop_na(ddff)
summary(ddff)

df_full <- merge.data.frame(ddff, trees_df_0)
summary(df_full)

## Having issues with this section. Same error regarding size. Need to reduce
  #... data frame sizes. Always a problem for the kgc data frame but not the others

#_______________________________________________________________________________

# REMAINING TASKS
  # 1) complete merge of all data frames
  # 2) observe statistical characteristics of mean temp, precip and elev

# QUESTIONS
  # 1) does any of this make any sense?
  # 2) am I using the merge.data.frame function properly?

################################################################################
# PART 4: Create virtual species with specified Alpine parameters
# Purpose: using the Alpine environmental conditions found in Part 3, create a
  # ... VS whose niche suitability aligns with an Alpine climate
# package: virtual species
## For this part as of now, I just inputted arbitrary mean and SD numbers for
  # ... temp and precipitation

# create a raster stack with variables to be used
alp_stack <- c(meantemp, annualprecip)
names(alp_stack)

# for this example I just kept mean temp and precip

# determine mean and sd for mean temp variable
mean(temp_df$meantemp)
# mean = -4
sd(temp_df$meantemp)
# sd = 24.5

# determine mean and sd for precip variable
mean(precip_df$annualprecip)
# mean = 550
sd(precip_df$annualprecip)
# sd = 652.5

# create custom parameters matching alpine temp and precip conditions
alp_pmtrs <- formatFunctions(wc2.1_10m_bio_1 = c(fun = "dnorm", mean = -4, sd = 24.5),
                             wc2.1_10m_bio_12 = c(fun ='dnorm', mean = 550, sd=652.5))

# create PCA with the seven variables to observe which 2 axis will cover the
  # ...majority of the data
alp_vs <- generateSpFromFun(raster.stack = c(meantemp, annualprecip),
                            parameters = alp_pmtrs,
                            plot = TRUE)
# creates environmental suitability plot for alpine species

# to view the response functions
plotResponse(alp_vs)

dev.off()

#_______________________________________________________________________________
# REMAINING TASKS/ISSUES
  # 1) use actual alpine conditions
  # 2) figure out how to change names of temp and precip because they are still
    # ... coming up as wc2.1_10m_bio_1 and wc2.1_10m_bio_12

# QUESTIONS
  # 1) Is there a way to customize the vs to alpine conditions using PCA or random
    # ... generation functions? I used function response function b/c I could alter
    # ... the mean and sd based on my findings in Part 3
  # 2) Does the collinearity part (part 2) matter for this if I'm only using mean
    # ... temp and precip variables?

#-------------------------------------------------------------------------------
# CONVERT TO PRESENCE ABSENCE

alp_pa <- convertToPA(alp_vs,
                   beta = 0.65, alpha = -0.07,
                   plot = TRUE)
