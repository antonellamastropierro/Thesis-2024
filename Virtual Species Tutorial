install.packages("virtualspecies")
install.packages("raster")
install.packages("rworldmap")

library(raster)
library(virtualspecies)
library(rworldmap)

################################################################################
# SECTION 1: INPUT DATA

# to input data directly from World Climate Data
worldclim <- getData("worldclim", var="bio", res=10)
# worldclim = data source
# var = variable (i.e. temp, prec) - bio = all 
# res = resolution
worldclim
# class = raster stack
# raster stack = gridded spatial data

names(worldclim)
# shows the 19 bio variables

# to access the first four variables/layers
worldclim[[1:4]]

# To access just BIO1 and BIO12
# BOI1 = mean temp
# BIO12 = annual precipitation
worldclim[[c(1,12)]]
# OR
worldclim[[c("bio1", "bio12")]]

# to plot the variables/layers
par(oma = c(0.1, 0.1, 0.1, 2.1))
plot(worldclim[[c("bio1", "bio12")]])
# par = parameter function
# oma = vector of the form c(bottom, left, top, right) giving
  # the size of the outer margins in lines of text
# now the mean temp and annual prec layers are plotted

dev.off()

###############################################################################
# SECTION 2: GENERATE VIRTUAL SPECIES DISTRIBUTION BY DEFINING RESPONSE FUNCTIONS
# Purpose: define the response functions of a virtual species to each env. variable
  # the responses are combined to calculate env. suitability of virtual species
  # Use function: generateSpFromFun
  # generation of vs by defining response functions is good for when you just have
    # a few number of variables (i.e. mean temp and annual precip)

# we can modify virtual species suitability by the env. variables (i.e if we want to
  # make a tropical species)
  # I.E. Temperature: we can use the vs package to create a bell-shaped
  # (guassian distribution function) curve that would show the suitability distribution
  # of the vs based on mean temp. In the gaussian equation, we have:
      # mu = mean (can be moved up and down the x-axis)
      # sigma = standard deviation (modifies the width of the distribution)

# the dnorm function obtains the result of the gaussian distribution function
  # I.E. gaussian equation if x (mean temp (BIO1)) = 15 C.
    # REMEMBER: WORLD CLIMATE USES TEMP * 10
dnorm(x = 150, mean = 250, sd = 50)
# = 0.001.079819
## QUESTION: if mean = 250, what does x = 150 represent?


# so we first have to tell the package which response we
# want for which variables
# the dnorm function is for the bell-shaped response
# formatFunctions function = tell package which reponse types
my.parameters <- formatFunctions(bio1 = c(fun='dnorm', mean=250, sd=50),
                                 bio12 = c(fun='dnorm', mean=4000, sd=2000))
# so for mean temp (BIO1) we are setting the response to dnorm (bell-shaped)
  # with mean = 250 (25C) and sd=50 C
# for annual precip (BIO12) we are setting response to dnorm (bell-shaped)
  # with mean = 4000 mm and sd = 2000 mm

# now we can use the generateSpFromFun function to great the vs with our parameters
my.first.species <- generateSpFromFun(raster.stack = worldclim[[c("bio1", "bio12")]],
                                      parameters = my.parameters,
                                      plot = TRUE)
# now we have a plot of the suitability of our VS mapped into geographic space based on
  # our parameters (bell-shaped response with mean temp and annual precip)
# the mean temp and annual precip responses are combined, but you can choose
  # how to combine the responses
my.first.species
# this shows us the information under my.first.species

dev.off()

# ------------------------------------------------------------------------------
# SECTION 2.2.1: OTHER RESPONSE FUNCTIONS

# Bell-shaped function = dnorm

# Linear Function = linearfun
# I.E. linear function for mean temp.
formatFunctions(bio1 = c(fun = "linearFun", a=1, b=0))
# a = slope, b = y-intercept
## QUESTION: how to plot the graph just showing the linear function
# to plot the linear function
x <- worldclim[[1]]
plot(x, y=linearFun(x, a=1, b=0) , type = "l")

# QUADRATIC FUNCTION = quadraticFun
formatFunctions(bio1 = c(fun = "quadraticFun", a=-1, b=2, c=0))
plot(x, y=quadraticFun(x, a=-1, b=2, c=0))

# LOGISTIC FUNCTION = logisticFun
formatFunctions(bio1 = c(fun = "logisticFun", beta=150, alpha=-5))
plot(x, y=logisticFun(x, beta=150, alpha=-5))

# NORMAL FUNCTION DEFINE BY EXTREMES = custnorm
formatFunctions(bio1 = c(fun = 'custnorm', mean = 250, diff = 50, prob = 0.99))
# this states that optimum (mean) = 250 (25C) and 99% of area under curve (prob=0.99)
  # will be comprised between 20 and 30C (diff=50 aka absolute difference between mean
  # and extreme values
## QUESTION: how can you plot this?

# BETA RESPONSE FUNCTION: betaFun
formatFunctions(bio1 = c(fun = 'betaFun', p1 = 0, p2 = 250, alpha = 0.9, gamma = 0.08))
## QUESTION: how can you plot this?

# be careful regarding scaling/rescaling when using different function
  # for different variables (i.e. gaussian and linear)
  # rescale.each.response = TRUE OR rescale.each.response = FALSE

#-------------------------------------------------------------------------------
# SECTION 2.2.3: COMBINING RESPONSE FUNCTIONS

# three ways for combining response functions:
  # 1: species.type = "additive" (adds response functions)
  # 2: (DEFAULT) species.type = "multiplicative" (multiplies response functions)
  # 3: formula = "bio1 + 2 * bio2 + bio3" (create your own formula for how to combine)

# 3 way can be used for adding weight/importance to a variable
  # I.E. if we want to create a strong importance for temp
formula = "2 * bio1 + bio12"
new.species <- generateSpFromFun(raster.stack = worldclim[[c("bio1", "bio12")]],
                                 parameters = my.parameters,
                                 formula = "2 * bio1 + bio12",
                                 plot = TRUE)
# this shows the geo distribution if temp influences the species more than precip
new.species
# gives all info on new.species

# rescale = TRUE is default

#-------------------------------------------------------------------------------
# SECTION 2.3: HOW TO CREATE AND USE YOUR RESPONSE FUNCTIONS

# you can create your own response functions
# I.E. to create simple linear function
linear.function <- function(x, a, b)
{a*x +b}
# created own function
linear.function(x=0.5, a=2, b=1)
linear.function(x = -20, a = 2, b = 0)

# we can add our own function into formationFunctions for bio1 (mean temp)
my.responses <- formatFunctions(bio1 = c(fun = "linear.function", a = 1, b = 0),
                                bio12 = c(fun = "dnorm", mean = 1000, sd = 1000))
generateSpFromFun(raster.stack = worldclim[[c("bio1", "bio12")]],
                  parameters = my.responses, plot = TRUE)

dev.off()

###############################################################################
# SECTION 3: GENERATE VS WITH PCA
# vs generation with PCA is when you are working with numerous variables
  # (i.e. 3 temp variables, 2 precip variables, 2 land use variables)
# function used for PCA generation: generateSpFromPCA

# generate from 6 variables
my.stack <- worldclim[[c("bio2", "bio5", "bio6", "bio12", "bio13", "bio14")]]
my.pca.species <- generateSpFromPCA(raster.stack = my.stack)
my.pca.species
# since PCA is performed on all pixels, large spatial scales/stacks may be too
  # much to extract all values for each pixel.
  # you can run PCA on random subset of values: sample.points = TRUE and define
    # number of pixels: nb.points = 5000 (usuall approx. 10,000)
my.pca.species <- generateSpFromPCA(raster.stack = my.stack, 
                                    sample.points = TRUE, nb.points = 5000)
my.pca.species
## QUESTION: What species is it? (i.e. tropical?)
  # no parameters are set, response is randomly generated

# to view the PCA so that you can choose your parameters
plotResponse(my.pca.species)
# the plot shows the variables (top left) and the pixel distribution along the
  # 2 axes.
# analysis of this plot shows that the species has a wide tolerance to axis 1
  # which is driven by bio 12 and bio12 (precipitation variables). The species
  # has a tighter/moderate response to axis 2, which is driven by bio2 and bio5
  # (temp variables).

# to show the distribution in geo space
plot(my.pca.species)

dev.off()

#------------------------------------------------------------------------------
# SECTION 3.2 CUSTOMIZATION OF PARAMETERS
# with PCA approach, the gaussian responses to the axes are randomly chosen
# you can customize the gaussian response functions in 2 ways:
  
# CUSTOMIZATION 1: niche.breadth : constrain the random generation of paramters (choose a narrow or wide niche)
    # controls the standard deviation
    # default is niche.breadth = "any"
narrow.species <- generateSpFromPCA(raster.stack = my.stack, sample.points = TRUE,
                                    nb.points = 5000,
                                    niche.breadth = "narrow")
plot(narrow.species)
# shows distribution with narrow niche breadth

wide.species <- generateSpFromPCA(raster.stack = my.stack, sample.points = TRUE,
                                  nb.points = 5000,
                                  niche.breadth = "wide")

plot(wide.species)
# shows distribution with wide species niche breadth

# CUSTOMIZATION 2: Define the mean (means) and standard deviation (sds)
  # I.E. customize for a species living in colder and wetter conditions
    # Axis 1: driven mostly by precipitation. For wetter suitability, you move
      # the mean to the right (mean of 0 or above)
    # Axis 2: driven mostly by temp variables. For colder suitability, you move
      # the mean to top (mean of 1 or above)
    ## QUESTION: why move mean to top if you want colder suitability?
    # niche width: create smaller SD for narrow niche breadth
my.custom.species <- generateSpFromPCA(raster.stack = my.stack, sample.points = TRUE,
                                       nb.points = 5000,
                                       means = c(0, 1), sds = c(0.5, 0.5))
# means c(0,1) = 0 for axis 1, 1 for axis 2
# sds c(0.5, 0.5)  = 0.5 for axis 1, 0.5 for axis 2

# to see custom distribution in geo space
plot(my.custom.species)

dev.off()

#-------------------------------------------------------------------------------
# SECTION 3.2.2: USING YOUR OWN PCA
# use package ade4 with function dudi.pca tp create your own PCA
# custom PCA would be needed if you need to create with a very small subset of
  # your env. stack (i.e. 250 pixels)
  # if you're working with small subset, the PCA can vary significantly among runs

# to extract a PCA from previous run and use it in next run
my.first.run <- generateSpFromPCA(raster.stack = my.stack, 
                                  sample.points = TRUE, nb.points = 250)
# access PCA with following command:
my.pca <- my.first.run$details$pca
my.pca
# and then enter it into your second run
my.second.run <- generateSpFromPCA(raster.stack = my.stack, 
                                   pca = my.pca)
my.second.run

dev.off()

################################################################################
# SECTION 4: CONVERSION OF ENVIRONMENTAL SUITABILITY TO PRESENCE/ABSENCE
# creating a suitability threshold is not appropriate b/c it does not represent real species
  # real species can be absent from high suitable areas due to biotic factors, events
  # real species can be present in unsuitable areas (i.e. microhabitats)
# creating a suitability threshold based on env. factors would just include the
  # abiotic component of BAM

# probabilistic approach is better:
  # instead of threshold with either presence/absence above/below suitability,
  # you have probabiity of occurrence in a pixel depending on suitability
  # once you have the probability of occurence for each pixel, that probability
  # is used to sample presence/absence in each pixel, meaning that you make a
  # random draw of presence/absence weight by the occurrence probability
  # This will result in different occupancy maps, all valid plots of true species
  # distribution

# conversion is customizable:
  # threshold conversion
  # logistic conversion
  # linear conversion
# the logistic conversion tends to be the more realistic distribution

#-------------------------------------------------------------------------------
# SECTION 4.2: CUSTOMIZATION OF THE CONVERSION

# convertToPA = function to show distribution in presence/absence
pa1 <- convertToPA(my.first.species, plot = TRUE)
# by default, the function randomly assigns parameters that determine shape of
# logistic curve:
  # alpha = slope of the curve
  # beta = location of inflection point (point where curve changes i.e. from concave to convex)

# how to customize the parameters (i.e. change alpha and beta)
pa2 <- convertToPA(my.first.species,
                   beta = 0.65, alpha = -0.07,
                   plot = TRUE)

dev.off()

# UNDERSTANDING BETA CHANGES:
  # lower beta = higher probability of finding suitable conditions (wider distribution range)
  # higher beta = lower probability of finding suitable conditions (smaller range)

# UNDERSTANDING ALPHA CHANGES: (I.E x-axis = suitability from 0-1)
  # if alpha = or > x, then conversion shape will be linear
  # if alpha = 5-10% of x, the conversion shape is logistic
  # if alpha < x, then conversion is threshold shape

## QUESTION: can you plot these graphs?

#-------------------------------------------------------------------------------
# SECTION 4.2.3: CONVERSION TO PRESENCE/ABSENCE WITH SPECIES PREVALENCE
  # species prevalence = # of places/pixels actually occupied by the species out
  # the total # of pixels available
  # NOT THE SAME AS SAMPLE PREVALENCE = proportion of samples in which speices
  # were found

# species prevalence is dependent on:
  # species-environment relationship
  # shape of probabilistic conversion curve
  # spatial distribution of environmental conditions
# if you want to set a certain species prevalence, the function might have to
  # find a conversion curve on its own to provide results closest to your species
  # prevalence value

# setting species prevalence includes modifying alpha and beta
  # if you fix alpha, then function will change beta to fit species prevalence
  # if you fix beta, then function will change alpha to fit species preavlance
  # Fixing alpha is recommended

# species.prevalence = species prevalence function
sp.0.2 <- convertToPA(my.first.species,
                      species.prevalence = 0.2)
# alpha is at default (-0.05)
# species.prevalence = .2: occupying 20% of world (pixels)
sp.0.2

# if you want to set alpha value with a more steep curve
sp.0.015 <- convertToPA(my.first.species,
                        species.prevalence = 0.015,
                        alpha = -0.015)
# species prevalence occupying 1.5% of world/pixels
sp.0.015

# if you want to set beta value instead
sp.10 <- convertToPA(my.first.species,
                     species.prevalence = 0.1,
                     alpha = NULL,
                     beta = 0.9)
# species prevalence occupying 10% of world
sp.10
# fixing beta instead of alpha resulted in alpha = -.3
  # indicating the conversion curve would be more linear shaped

# set a low beta
sp.10bis <- convertToPA(my.first.species,
                        species.prevalence = 0.1,
                        alpha = NULL,
                        beta = 0.3)
# WARNING MESSAGE: Warning, the desired species prevalence cannot be obtained
  # because of the chosen beta and available environmental conditions
  # The closest possible estimate of prevalence was 0.15 
  # Perhaps you can try a higher beta value.
sp.10bis

dev.off()

################################################################################
# SECTION 5: GENERATING RANDOM VIRTUAL SPECIES

# generateRandomSp = function to generate random species
my.stack <- worldclim[[c("bio2", "bio5", "bio6", "bio12", "bio13", "bio14")]]
random.sp <- generateRandomSp(my.stack)
# species was generated with PCA approach due to numerous variables
  # PCA: 6 or more variables
  # response function: less than 6 variables

random.sp
# shows alpha, beta, species prevalence

dev.off()

#-------------------------------------------------------------------------------
# SECTION 5.1: GENERAL PARAMETERS TO CUSTOMIZE

# APPROACH OPTIONS ARGUMENT: approach =
  # automatic: will be chosen for you depending on # of variables
  # random: random approach chose
  # response
  # PCA

# RESCALING ARGUMENT: rescale = TRUE or FALSE

# CONVERSION TO PRESENCE/ABSENCE ARGUMENT: convert.to.PA = TRUE
  # CONVERSION METHOD ARGUMENT: PA.method
    # probability
    # threshold
  # can modify alpha, beta, and species.prevalence

#-------------------------------------------------------------------------------
# SECTION 5.2: PARAMETERS SPECIFIC TO A RESPONSE APPROACH
# Response Function Options:
  # gaussian
  # linear
  # logistic
  # quadratic

# default = all relations are used

# relations argument = combine/modify response functions
random.sp1 <- generateRandomSp(worldclim[[1:3]], 
                               relations = c("gaussian", "logistic"),
                               convert.to.PA = FALSE)
random.sp1
# used 3 variables: bio1, bio2, bio3
# 2 response functions: gaussian and logistic
# suitability map (PA=FALSE)

# plotResponse function = plotting the response functions
plotResponse(random.sp1)
# shows response function for each variable

# Example of just gaussian response
random.sp2 <- generateRandomSp(worldclim[[1:3]], 
                               relations = "gaussian",
                               convert.to.PA = FALSE)
random.sp2
plotResponse(random.sp2)

dev.off()

# rescale.each.response argument to rescale response

# you can activate a realistic species argument in order to provide randomly
  # generated realistic species as random species might show a species living in
  # 35C summer and -50C winters
# realistic.sp argument = activate realistic species
# without the realistic species argument, the species reponse funcitons and their
  # suitability get picked randomly for each variable and independent of each variable
# with the realistic species argument, the response functions of the variables
  # their suitability range depends on the response function and suitability of
  # the other variables. It will get constrain based on the suitability of the
  # other variables
# sometimes realistic species argument doesn't work and you might have to try PCA
  # approach or different runs

# realistic species argument = TRUE
realistic.sp <- generateRandomSp(worldclim[[c(1, 5)]],
                                 realistic.sp = TRUE,
                                 convert.to.PA = FALSE)

# realistic species argument = FALSE
unrealistic.sp <- generateRandomSp(worldclim[[c(1, 5)]],
                                   realistic.sp = FALSE,
                                   convert.to.PA = FALSE)

# to convert realistic species to presence/absence
realistic.sp <- convertToPA(realistic.sp, beta = 0.5)

dev.off()

# sp.type argument = define how response functions are combined
  # species.type = "additive" (response functions are added)
  # "multiplicative" (default)
  # "mixed"

#-------------------------------------------------------------------------------
# SECTION 5.3: PARAMETERS SPECIFIC TO PCA APPROACH

# you can set # of sample points(pixels) if you need to
safe.run.sp <- generateRandomSp(worldclim[[c(1, 5, 6)]], 
                                sample.points = TRUE,
                                nb.points = 1000)

# modify niche range width using niche.breadth argument

dev.off()

################################################################################
# SECTION 6: EXPLORING AND USING THE OUTPUTS OF VIRTUAL SPECIES
# purpose of section is to show how to obtain the maps of generated virtual species

#-------------------------------------------------------------------------------
# SECTION 6.1: CONSULT THE DETAILS OF A GENERATED VIRTUAL SPECIES

# example of creating a virtual species

# format response functions
my.parameters <- formatFunctions(bio1 = c(fun = 'dnorm', mean = 250, sd = 50),
                                 bio12 = c(fun = 'dnorm', mean = 4000, sd = 2000))

# generate virtual species
my.species <- generateSpFromFun(raster.stack = worldclim[[c("bio1", "bio12")]],
                                parameters = my.parameters)

# convert to presence/absence
my.species <- convertToPA(my.species,
                          beta = 0.7)

# to see how it was generated
my.species
# shows variables used
# shows approach used (gaussian)
# shows range of each variable (mean temp: -26.9C - 31.4C)
# shows parameters of conversion to presence/absence (probability)
# shows alpha, beta, species prevalence

dev.off()

#-------------------------------------------------------------------------------
# SECTION 6.2: PLOT VIRTUAL SPECIES MAP

plot(my.species)

dev.off()

#-------------------------------------------------------------------------------
# SECTION 6.3: PLOT SPECIES-ENVIRONMENT RELATIONSHIP

plotResponse(my.species)

dev.off()

#-------------------------------------------------------------------------------
# SECTION 6.4: EXTACT ELEMENTS OF THE VIRTUAL SPECIES
  # I.E. rasters of environmental suitability

# virtual species class is list with things added to list when you run functions
# str() function shows the list
str(my.species)
# list of 6 elements:
  # approach, details, suitable raster, PA.conversion, probability of occurrence, pa.raster

# if you want to extract an element
my.species$pa.raster
my.species$suitab.raster

# to extract sub-sub objects
my.species$details$variables

# sub-sub-sub objects (3rd degree) are not shown with str()
my.species$details$parameters
# shows also fun, args, min, max, etc

# to extract 3rd degree sub objects
str(my.species$details$parameters)

#-------------------------------------------------------------------------------
# SECTION 6.5 SAVING VIRTUAL SPECIES OBJECTS FOR LATER USE

# save () function: to save on hard drive
save(my.species, file = "MyVirtualSpecies")

# load () function: to load object
load(file = "MyVirtualSpecies")

################################################################################
# SECTION 7: SAMPLING OCCURRENCE POINTS

# sampleOccurrences function = sampling of species occurrence
  # you can sample either presence/absence or presence only
  # gives you ability to introduce sampling biases

# EXAMPLE: tropical virtual species
# format response functions
my.parameters <- formatFunctions(bio1 = c(fun = 'dnorm', mean = 250, sd = 50),
                                 bio12 = c(fun = 'dnorm', mean = 4000, sd = 2000))

# generate virtual species
my.first.species <- generateSpFromFun(raster.stack = worldclim[[c("bio1", "bio12")]],
                                      parameters = my.parameters)

# convert to presence/absence
my.first.species <- convertToPA(my.first.species,
                                beta = 0.7, plot = FALSE)

# sample presence-only occurrences
# n = 30: number of points to samples
presence.points <- sampleOccurrences(my.first.species,
                                     n = 30,  type = "presence only")
# shows presence points on map

str(presence.points)
# sample points: dataframe with the sampled points
# detection.probability = 1
# error probability = 0

presence.points$sample.points

colnames(presence.points$sample.points)
# dataframe with 4 columns:
  # x coordinates
  # y coordinates
  # real presence/absence (1/0) in the sampled pixel
  # observed (1=pre, 0=abs)
  # REAL and OBSERVED columns only differ if you have specified detection
    # probability and/or error probability

# sample presence/absence occurrences
PA.points <- sampleOccurrences(my.first.species,
                               n = 30,
                               type = "presence-absence")

PA.points
# the sample points are purely random
  # chance of having no presence points
# sample.prevalence argument = used to define # of presences and absences

dev.off()

#-------------------------------------------------------------------------------
# SECTION 7.2: DELIMITING A SAMPLING AREA
# 3 ways to delimit sampling area:
  # 1: specify region of world
  # 2: provide a polygon (spatialPolygons of package sp)
  # 3: provide an extent object

# APPROACH 1: SPECIFY REGION OF WORLD: sampling.area argument
PA.points <- sampleOccurrences(my.first.species,
                               n = 30,
                               type = "presence-absence",
                               sampling.area = c("South America", "Mexico"))
# you must provide the correct names of the region/continents and countries

# Continent Names: Africa, Antarctica, Asia, Australia, Europe, North America, South America
# Region Names: Africa, Antarctica, Australia, Eurasia, North America, South America
# Country Names: to view the correct countries names, use rworldmap package
levels(getMap()@data$SOVEREIGNT)

dev.off()

# APPRACH 2: PROVIDING A POLYGON
# use getData function to get a specific polygon
brazil <- getData("GADM", country = "BRA", level = 0)
plot(brazil)
# you can also import your own polygons
# place brazil into sampling.area argument
PA.points <- sampleOccurrences(my.first.species,
                               n = 30,
                               type = "presence-absence",
                               sampling.area = "Brazil")
### ERROR: unable to plot polygon:
  ## Please provide to sampling.area either
      # the names of countries, region and/or continents in which to sample
      # SpatialPolygons or SpatialPolygonsDataFrame
      # an extent in which the sampling will take place
### not registering the spatialpolygon dataframe but works with region/continent

# too zoomed out, so you need to manually limit plot region
# first get dataframe of occurrence points
occ <- PA.points$sample.points

# specify the x,y coordinates
plot(my.first.species$pa.raster, 
     xlim = c(-80, -20),
     ylim = c(-35, 5))
# add the brazil boarder
plot(brazil, add=T)
occ$Observed
# plot the occurrence points from the dataframe
  # presence points from dataframe
points(occ[occ$Observed == 1, c("x", "y")], pch = 16, cex = .8)
  # absence points from dataframe
points(occ[occ$Observed == 0, c("x", "y")], pch = 1, cex = .8)
# shows Brazil region zoomed in with occurrence dataframe

dev.off()

# APPROACH 3: EXTENT OBJECT
# use extent function (xmin, xmax, ymin, ymax)
my.extent <- extent(-80, -20, -35, -5)
PA.points <- sampleOccurrences(my.first.species,
                               n = 30,
                               type = "presence-absence",
                               sampling.area = my.extent)
### ERROR: same as before, not reading my.extent in sampling area argument

# if worked, then you would plot
PA.points <- sampleOccurrences(my.first.species,
                               n = 30,
                               type = "presence-absence",
                               sampling.area = my.extent)
plot(my.extent, add = TRUE)

dev.off()

#-------------------------------------------------------------------------------
# SECTION 7.3: SAMPLING BIASES

# SECTION 7.3.1 (BIAS 1): DETECTION PROBABILITY
# detection.probability argument lets you customize detection probability (0 -1)

# EXAMPLE: Rare species: low detection probability
  # Presence/absence type
PA.points <- sampleOccurrences(my.first.species,
                               sampling.area = "Brazil",
                               n = 50,
                               type = "presence-absence",
                               detection.probability = 0.3)
PA.points
# some points in real (1) are observed as absent (0)

  # Presence-only type
PO.points <- sampleOccurrences(my.first.species,
                               sampling.area = "Brazil",
                               n = 50,
                               type = "presence only",
                               detection.probability = 0.3)
PO.points
# lower number of sampled points
# only a fraction are sample as presence points
# NA = no information

dev.off()

#-------------------------------------------------------------------------------
# SECTION 7.3.2 (BIAS 1 CONT'D): Detection Probability as a Function of Environmental Suitability
# if you want to make the detection probability dependent on the env. suitability
  # meaning that cells will be weight by env. suitability:
    # less suitable cells = less chance of detection
  # higher env. suitability -> greater population size -> larger detection probability

# I.E. if species has detection probability = 0.5
  # detection probability for 1 env. suitable cell/pixel = 1
  # detection probability for 0.5 env. suitable cell/pixel = 0.25
# no occurrence points will be detected outside distribution range, regardless of
  # env. suitability

# you can either set detection.probability argument
  # OR you can set detection.probability = 1 and correct.by.suitability = TRUE
  # this would set detection probability = env. suitability
PA.points <- sampleOccurrences(my.first.species,
                               sampling.area = "Brazil",
                               n = 100,
                               type = "presence-absence",
                               detection.probability = 1,
                               correct.by.suitability = TRUE,
                               plot = FALSE)
# don't plot right away because we want a more zoomed in plot

# retrieve occurrencec data frame
occ <- PA.points$sample.points

# and plot
plot(my.first.species$suitab.raster, 
     xlim = c(-80, -20),
     ylim = c(-35, 5))
plot(brazil, add = TRUE)
points(occ[occ$Observed == 1, c("x", "y")], pch = 16, cex = .8)
points(occ[occ$Observed == 0, c("x", "y")], pch = 1, cex = .8)
# presence/absence with detection probability = env. suitability

dev.off()

#-------------------------------------------------------------------------------
# SECTION 7.3.3 (BIAS 2): ERROR PROBABILITY
# error probability argument = probability of finding species where it's absent
PA.points <- sampleOccurrences(my.first.species,
                               sampling.area = "Brazil",
                               n = 20,
                               type = "presence-absence",
                               error.probability = 0.3)
PA.points
# shows points of real = 0 and observed = 1

# Error probability useless for presence-only plot since sampling only occurs
  # within boundaries of species distribution range
  # To have errors for presence-only: make presence/absence and use only presence
    # points obtained

# There is an interaction between detection probability and error probability
  # if species is present in cell but not detected, presence can still be attributed
    # due to error.
# EXAMPLE: low detection probability and high error probability
PA.points <- sampleOccurrences(my.first.species,
                               sampling.area = "Brazil",
                               n = 20,
                               type = "presence-absence",
                               detection.probability = 0.2,
                               error.probability = 0.8)
PA.points
# pixels had species not detected but due to high error probability, they were
  # counted as observed presences

dev.off()

#-------------------------------------------------------------------------------
# SECTION 7.3.4 (BIAS 3): UNEVEN SAMPLING INTENSITY
# uneven sampling intensity = higher sampling frequency in some area than others
# components include:
  # bias = general area of bias (country, continent, region)
  # bias.strength = degree of bias in that area (50 = sampling is 50 times more intenste)
  # bias.area = specific area (i.e. Colombia, South America, Eurasia)

# EXAMPLE
PO.points <- sampleOccurrences(my.first.species,
                               n = 100, 
                               bias = "continent",
                               bias.strength = 20,
                               bias.area = "South America")
# shows higher sampling frequency in South America

# EXAMPLE: strong bias in certain countries
PO.points <- sampleOccurrences(my.first.species,
                               n = 100, 
                               bias = "country",
                               bias.strength = 20,
                               bias.area = c("Mexico", "Colombia"))
dev.off()

# to manually draw bias location
PO.points <- sampleOccurrences(my.first.species,
                               n = 100, 
                               bias = "extent",
                               bias.strength = 50,
                               bias.area = NULL)

dev.off()

# bias = "manual" : manually define weights for all the cells
  # you need to provide a raster of weights to weights argument
# EXAMPLE: create a raster of weights with the weight depending on area of each cell
weight.raster <- area(worldclim)

plot(weight.raster)
plot(getMap(), add = TRUE)
PO.points <- sampleOccurrences(my.first.species,
                               n = 100, 
                               bias = "manual",
                               weights = weight.raster)
### SAME ERROR AS BEFORE, not registering the weight.raster

dev.off()

# SAMPLING MULTIPLE RECORDS IN SAME CELLS
# you need to let function sample repeatedly in the same cells
PO.points <- sampleOccurrences(my.first.species,
                               n = 1000, 
                               replacement = TRUE,
                               plot = FALSE)
# add # of duplicated records
length(which(duplicated(PO.points$sample.points[, c("x", "y")])))

#-------------------------------------------------------------------------------
# SECTION 7.4: DEFINING THE SAMPLE PREVALENCE
# sample prevalence = proportion of samples in which species has been found
  # DIFFERENT FROM SPECIES PREVALENCE

# EXAMPLE: 50% presence points, 50% absence points
PA.points <- sampleOccurrences(my.first.species,
                               n = 30,
                               type = "presence-absence",
                               sample.prevalence = 0.5)

PA.points
# shows 50% sample prevalence

dev.off()

################################################################################
# SECTION 8: DISPERSAL BIAS
# assumption: species are in equilibrium with their env., meaning they're supposed
  # to occupy full range of suitable env. conditions
# reality: other interactions come into play (BAM): biotic, movement

# limitDistribution function = introduce dispersal bias

# EXAMPLE: species originates in South America, but can't disperse due to oceans
# First create VS
# Formatting of the response functions
my.parameters <- formatFunctions(bio1 = c(fun = 'dnorm', mean = 250, sd = 50),
                                 bio12 = c(fun = 'dnorm', mean = 4000, sd = 2000))

# Generation of the virtual species
my.first.species <- generateSpFromFun(raster.stack = worldclim[[c("bio1", "bio12")]],
                                      parameters = my.parameters)

# Conversion to presence-absence
my.first.species <- convertToPA(my.first.species,
                                beta = 0.7, plot = FALSE)

# Add dispersal bias to species distribution
my.first.species <- limitDistribution(my.first.species, 
                                      geographical.limit = "continent",
                                      area = "South America",
                                      plot = FALSE)

str(my.first.species)

# plot theoretical distribution and realized distribution
par(mfrow = c(2, 1))
plot(my.first.species$pa.raster, main = "Theoretical Distribution")
plot(my.first.species$occupied.area, main = "Realized Distribution")

dev.off()

# EXAMPLE: limiting to countries
my.sp1 <- limitDistribution(my.first.species, 
                            geographical.limit = "country",
                            area = c("Brazil", "Venezuela"))
# can do same with polygon and extent (if they work)

dev.off()

#-------------------------------------------------------------------------------
# SECTION 8.3: SAMPLING OCCURRENCE POINTS IN DISPERSAL-LIMITED DISTRIBUTION
# how to add your sampling points to dispersal limitations created

# Example: dispersal limitation in South American
my.first.species <- limitDistribution(my.first.species, 
                                      geographical.limit = "continent",
                                      area = "South America",
                                      plot = FALSE)
sampleOccurrences(my.first.species, n = 30)

dev.off()
